{"version":3,"sources":["../../../../node_modules/acorn/src/index.js"],"names":["Parser","plugins","defaultOptions","Position","SourceLocation","getLineInfo","Node","TokenType","types","keywords","TokContext","isIdentifierChar","isIdentifierStart","Token","isNewLine","lineBreak","lineBreakG","nonASCIIwhitespace","parse","parseExpressionAt","tokenizer","addLooseExports","version","input","options","pos","p","nextToken","parseExpression","parse_dammit","LooseParser","pluginsLoose"],"mappings":";;;;;;;AAqBA;;;;;kBAQQA,M;;;;;;kBAAQC,O;;;;;;;;;oBACRC,c;;;;;;;;;oBACAC,Q;;;;;;oBAAUC,c;;;;;;oBAAgBC,W;;;;;;;;;iBAC1BC,I;;;;;;;;;sBACAC,S;;;;;;sBAAWC,K;;;;;;sBAAmBC,Q;;;;;;;;;yBAC9BC,U;;;;;;yBAAYF,K;;;;;;;;;uBACZG,gB;;;;;;uBAAkBC,iB;;;;;;;;;qBAClBC,K;;;;;;;;;uBACAC,S;;;;;;uBAAWC,S;;;;;;uBAAWC,U;;;;;;uBAAYC,kB;;;QAW1BC,K,GAAAA,K;QAQAC,iB,GAAAA,iB;QASAC,S,GAAAA,S;QAQAC,e,GAAAA,e;;AAnDhB;;AACA;;AACA;;AACA;;AACA;;AACA;;AAYO,IAAMC,4BAAU,OAAhB;;AAEP;AACA;AACA;AACA;AACA;AACA;;AAEO,SAASJ,KAAT,CAAeK,KAAf,EAAsBC,OAAtB,EAA+B;AACpC,SAAO,kBAAWA,OAAX,EAAoBD,KAApB,EAA2BL,KAA3B,EAAP;AACD;;AAED;AACA;AACA;;AAEO,SAASC,iBAAT,CAA2BI,KAA3B,EAAkCE,GAAlC,EAAuCD,OAAvC,EAAgD;AACrD,MAAIE,IAAI,kBAAWF,OAAX,EAAoBD,KAApB,EAA2BE,GAA3B,CAAR;AACAC,IAAEC,SAAF;AACA,SAAOD,EAAEE,eAAF,EAAP;AACD;;AAED;AACA;;AAEO,SAASR,SAAT,CAAmBG,KAAnB,EAA0BC,OAA1B,EAAmC;AACxC,SAAO,kBAAWA,OAAX,EAAoBD,KAApB,CAAP;AACD;;AAED;AACA;AACA;AACO,IAAIM,4CAAJ;AAAA,IAAkBC,0CAAlB;AAAA,IAA+BC,4CAA/B,C,CAA4C;AAC5C,SAASV,eAAT,CAAyBH,KAAzB,EAAgClB,MAAhC,EAAwCC,OAAxC,EAAiD;AACtD,UAFS4B,YAET,kBAAeX,KAAf,CADsD,CACjC;AACrB,UAHuBY,WAGvB,iBAAc9B,MAAd;AACA,UAJoC+B,YAIpC,kBAAe9B,OAAf;AACD","file":"index.js","sourcesContent":["// Acorn is a tiny, fast JavaScript parser written in JavaScript.\n//\n// Acorn was written by Marijn Haverbeke, Ingvar Stepanyan, and\n// various contributors and released under an MIT license.\n//\n// Git repositories for Acorn are available at\n//\n//     http://marijnhaverbeke.nl/git/acorn\n//     https://github.com/ternjs/acorn.git\n//\n// Please use the [github bug tracker][ghbt] to report issues.\n//\n// [ghbt]: https://github.com/ternjs/acorn/issues\n//\n// This file defines the main parser interface. The library also comes\n// with a [error-tolerant parser][dammit] and an\n// [abstract syntax tree walker][walk], defined in other files.\n//\n// [dammit]: acorn_loose.js\n// [walk]: util/walk.js\n\nimport {Parser} from \"./state\"\nimport \"./parseutil\"\nimport \"./statement\"\nimport \"./lval\"\nimport \"./expression\"\nimport \"./location\"\nimport \"./scope\"\n\nexport {Parser, plugins} from \"./state\"\nexport {defaultOptions} from \"./options\"\nexport {Position, SourceLocation, getLineInfo} from \"./locutil\"\nexport {Node} from \"./node\"\nexport {TokenType, types as tokTypes, keywords as keywordTypes} from \"./tokentype\"\nexport {TokContext, types as tokContexts} from \"./tokencontext\"\nexport {isIdentifierChar, isIdentifierStart} from \"./identifier\"\nexport {Token} from \"./tokenize\"\nexport {isNewLine, lineBreak, lineBreakG, nonASCIIwhitespace} from \"./whitespace\"\n\nexport const version = \"5.0.3\"\n\n// The main exported interface (under `self.acorn` when in the\n// browser) is a `parse` function that takes a code string and\n// returns an abstract syntax tree as specified by [Mozilla parser\n// API][api].\n//\n// [api]: https://developer.mozilla.org/en-US/docs/SpiderMonkey/Parser_API\n\nexport function parse(input, options) {\n  return new Parser(options, input).parse()\n}\n\n// This function tries to parse a single expression at a given\n// offset in a string. Useful for parsing mixed-language formats\n// that embed JavaScript expressions.\n\nexport function parseExpressionAt(input, pos, options) {\n  let p = new Parser(options, input, pos)\n  p.nextToken()\n  return p.parseExpression()\n}\n\n// Acorn is organized as a tokenizer and a recursive-descent parser.\n// The `tokenizer` export provides an interface to the tokenizer.\n\nexport function tokenizer(input, options) {\n  return new Parser(options, input)\n}\n\n// This is a terrible kludge to support the existing, pre-ES6\n// interface where the loose parser module retroactively adds exports\n// to this module.\nexport let parse_dammit, LooseParser, pluginsLoose // eslint-disable-line camelcase\nexport function addLooseExports(parse, Parser, plugins) {\n  parse_dammit = parse // eslint-disable-line camelcase\n  LooseParser = Parser\n  pluginsLoose = plugins\n}\n"]}