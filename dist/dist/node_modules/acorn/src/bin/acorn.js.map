{"version":3,"sources":["../../../../../node_modules/acorn/src/bin/acorn.js"],"names":["acorn","infile","forceFile","silent","compact","tokenize","options","help","status","print","console","log","error","process","argv","exit","i","length","arg","locations","allowHashBang","sourceType","match","ecmaVersion","run","code","result","parse","tokenizer","token","getToken","push","type","tokTypes","eof","e","message","JSON","stringify","stdin","resume","on","chunk"],"mappings":";;AAAA;;AACA;;AACA;;IAAYA,K;;;;AAEZ,IAAIC,eAAJ;AAAA,IAAYC,kBAAZ;AAAA,IAAuBC,SAAS,KAAhC;AAAA,IAAuCC,UAAU,KAAjD;AAAA,IAAwDC,WAAW,KAAnE;AACA,IAAMC,UAAU,EAAhB;;AAEA,SAASC,IAAT,CAAcC,MAAd,EAAsB;AACpB,MAAMC,QAASD,UAAU,CAAX,GAAgBE,QAAQC,GAAxB,GAA8BD,QAAQE,KAApD;AACAH,QAAM,YAAY,oBAASI,QAAQC,IAAR,CAAa,CAAb,CAAT,CAAZ,GAAwC,kEAA9C;AACAL,QAAM,kHAAN;AACAI,UAAQE,IAAR,CAAaP,MAAb;AACD;;AAED,KAAK,IAAIQ,IAAI,CAAb,EAAgBA,IAAIH,QAAQC,IAAR,CAAaG,MAAjC,EAAyC,EAAED,CAA3C,EAA8C;AAC5C,MAAME,MAAML,QAAQC,IAAR,CAAaE,CAAb,CAAZ;AACA,MAAI,CAACE,OAAO,GAAP,IAAcA,IAAI,CAAJ,KAAU,GAAzB,KAAiC,CAACjB,MAAtC,EAA8CA,SAASiB,GAAT,CAA9C,KACK,IAAIA,OAAO,IAAP,IAAe,CAACjB,MAAhB,IAA0Be,IAAI,CAAJ,IAASH,QAAQC,IAAR,CAAaG,MAApD,EAA4Df,YAAYD,SAASY,QAAQC,IAAR,CAAa,EAAEE,CAAf,CAArB,CAA5D,KACA,IAAIE,OAAO,aAAX,EAA0BZ,QAAQa,SAAR,GAAoB,IAApB,CAA1B,KACA,IAAID,OAAO,mBAAX,EAAgCZ,QAAQc,aAAR,GAAwB,IAAxB,CAAhC,KACA,IAAIF,OAAO,UAAX,EAAuBf,SAAS,IAAT,CAAvB,KACA,IAAIe,OAAO,WAAX,EAAwBd,UAAU,IAAV,CAAxB,KACA,IAAIc,OAAO,QAAX,EAAqBX,KAAK,CAAL,EAArB,KACA,IAAIW,OAAO,YAAX,EAAyBb,WAAW,IAAX,CAAzB,KACA,IAAIa,OAAO,UAAX,EAAuBZ,QAAQe,UAAR,GAAqB,QAArB,CAAvB,KACA;AACH,QAAIC,QAAQJ,IAAII,KAAJ,CAAU,eAAV,CAAZ;AACA,QAAIA,KAAJ,EACEhB,QAAQiB,WAAR,GAAsB,CAACD,MAAM,CAAN,CAAvB,CADF,KAGEf,KAAK,CAAL;AACH;AACF;;AAED,SAASiB,GAAT,CAAaC,IAAb,EAAmB;AACjB,MAAIC,eAAJ;AACA,MAAI;AACF,QAAI,CAACrB,QAAL,EAAe;AACbqB,eAAS1B,MAAM2B,KAAN,CAAYF,IAAZ,EAAkBnB,OAAlB,CAAT;AACD,KAFD,MAEO;AACLoB,eAAS,EAAT;AACA,UAAIE,YAAY5B,MAAM4B,SAAN,CAAgBH,IAAhB,EAAsBnB,OAAtB,CAAhB;AAAA,UAAgDuB,cAAhD;AACA,SAAG;AACDA,gBAAQD,UAAUE,QAAV,EAAR;AACAJ,eAAOK,IAAP,CAAYF,KAAZ;AACD,OAHD,QAGSA,MAAMG,IAAN,IAAchC,MAAMiC,QAAN,CAAeC,GAHtC;AAID;AACF,GAXD,CAWE,OAAOC,CAAP,EAAU;AACVzB,YAAQE,KAAR,CAAcuB,EAAEC,OAAhB;AACAvB,YAAQE,IAAR,CAAa,CAAb;AACD;AACD,MAAI,CAACZ,MAAL,EAAaO,QAAQC,GAAR,CAAY0B,KAAKC,SAAL,CAAeZ,MAAf,EAAuB,IAAvB,EAA6BtB,UAAU,IAAV,GAAiB,CAA9C,CAAZ;AACd;;AAED,IAAIF,aAAaD,UAAUA,UAAU,GAArC,EAA0C;AACxCuB,MAAI,sBAASvB,MAAT,EAAiB,MAAjB,CAAJ;AACD,CAFD,MAEO;AACL,MAAIwB,OAAO,EAAX;AACAZ,UAAQ0B,KAAR,CAAcC,MAAd;AACA3B,UAAQ0B,KAAR,CAAcE,EAAd,CAAiB,MAAjB,EAAyB;AAAA,WAAShB,QAAQiB,KAAjB;AAAA,GAAzB;AACA7B,UAAQ0B,KAAR,CAAcE,EAAd,CAAiB,KAAjB,EAAwB;AAAA,WAAMjB,IAAIC,IAAJ,CAAN;AAAA,GAAxB;AACD","file":"acorn.js","sourcesContent":["import {basename} from \"path\"\nimport {readFileSync as readFile} from \"fs\"\nimport * as acorn from \"acorn\"\n\nlet infile, forceFile, silent = false, compact = false, tokenize = false\nconst options = {}\n\nfunction help(status) {\n  const print = (status == 0) ? console.log : console.error\n  print(\"usage: \" + basename(process.argv[1]) + \" [--ecma3|--ecma5|--ecma6|--ecma7|...|--ecma2015|--ecma2016|...]\")\n  print(\"        [--tokenize] [--locations] [---allow-hash-bang] [--compact] [--silent] [--module] [--help] [--] [infile]\")\n  process.exit(status)\n}\n\nfor (let i = 2; i < process.argv.length; ++i) {\n  const arg = process.argv[i]\n  if ((arg == \"-\" || arg[0] != \"-\") && !infile) infile = arg\n  else if (arg == \"--\" && !infile && i + 2 == process.argv.length) forceFile = infile = process.argv[++i]\n  else if (arg == \"--locations\") options.locations = true\n  else if (arg == \"--allow-hash-bang\") options.allowHashBang = true\n  else if (arg == \"--silent\") silent = true\n  else if (arg == \"--compact\") compact = true\n  else if (arg == \"--help\") help(0)\n  else if (arg == \"--tokenize\") tokenize = true\n  else if (arg == \"--module\") options.sourceType = \"module\"\n  else {\n    let match = arg.match(/^--ecma(\\d+)$/)\n    if (match)\n      options.ecmaVersion = +match[1]\n    else\n      help(1)\n  }\n}\n\nfunction run(code) {\n  let result\n  try {\n    if (!tokenize) {\n      result = acorn.parse(code, options)\n    } else {\n      result = []\n      let tokenizer = acorn.tokenizer(code, options), token\n      do {\n        token = tokenizer.getToken()\n        result.push(token)\n      } while (token.type != acorn.tokTypes.eof)\n    }\n  } catch (e) {\n    console.error(e.message)\n    process.exit(1)\n  }\n  if (!silent) console.log(JSON.stringify(result, null, compact ? null : 2))\n}\n\nif (forceFile || infile && infile != \"-\") {\n  run(readFile(infile, \"utf8\"))\n} else {\n  let code = \"\"\n  process.stdin.resume()\n  process.stdin.on(\"data\", chunk => code += chunk)\n  process.stdin.on(\"end\", () => run(code))\n}\n"]}