{"version":3,"sources":["../../../../../../node_modules/acorn-jsx/node_modules/acorn/src/statement.js"],"names":["pp","prototype","parseTopLevel","node","first","body","type","eof","stmt","parseStatement","push","isUseStrict","setStrict","next","options","ecmaVersion","sourceType","finishNode","loopLabel","kind","switchLabel","isLet","name","value","lastIndex","pos","skip","exec","input","length","nextCh","charCodeAt","ident","slice","isKeyword","declaration","topLevel","starttype","startNode","_var","_break","_continue","parseBreakContinueStatement","keyword","_debugger","parseDebuggerStatement","_do","parseDoStatement","_for","parseForStatement","_function","unexpected","parseFunctionStatement","_class","parseClass","_if","parseIfStatement","_return","parseReturnStatement","_switch","parseSwitchStatement","_throw","parseThrowStatement","_try","parseTryStatement","_const","parseVarStatement","_while","parseWhileStatement","_with","parseWithStatement","braceL","parseBlock","semi","parseEmptyStatement","_export","_import","allowImportExportEverywhere","raise","start","inModule","parseImport","parseExport","maybeName","expr","parseExpression","eat","colon","parseLabeledStatement","parseExpressionStatement","isBreak","insertSemicolon","label","parseIdent","semicolon","i","labels","lab","pop","expect","test","parseParenExpression","parenL","parseFor","init","parseVar","_in","isContextual","declarations","parseForIn","refDestructuringErrors","checkPatternErrors","toAssignable","checkLVal","checkExpressionErrors","parseFunction","consequent","alternate","_else","inFunction","allowReturnOutsideFunction","argument","discriminant","cases","cur","sawDefault","braceR","_case","_default","isCase","raiseRecoverable","lastTokStart","lastTokEnd","empty","block","handler","_catch","clause","param","parseBindingAtom","parenR","finalizer","_finally","strict","object","isLoop","statementStart","expression","allowStrict","oldStrict","update","left","right","isFor","decl","parseVarId","eq","parseMaybeAssign","id","comma","isStatement","allowExpressionBody","initFunction","generator","star","oldInGen","inGenerator","parseFunctionParams","parseFunctionBody","params","parseBindingList","parseClassId","parseClassSuper","classBody","hadConstructor","method","isGenerator","isMaybeStatic","parsePropertyName","static","isGetSet","computed","key","parseClassMethod","paramCount","parseMethod","superClass","_extends","parseExprSubscripts","expectContextual","source","string","parseExprAtom","parens","needsSemi","shouldParseExportStatement","specifiers","parseExportSpecifiers","eatContextual","keywords","local","reservedWords","nodes","afterTrailingComma","exported","parseImportSpecifiers","imported","reservedWordsStrict"],"mappings":"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","file":"statement.js","sourcesContent":["import {types as tt} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {lineBreak, skipWhiteSpace} from \"./whitespace\"\nimport {isIdentifierStart, isIdentifierChar} from \"./identifier\"\nimport {DestructuringErrors} from \"./parseutil\"\n\nconst pp = Parser.prototype\n\n// ### Statement parsing\n\n// Parse a program. Initializes the parser, reads any number of\n// statements, and wraps them in a Program node.  Optionally takes a\n// `program` argument.  If present, the statements will be appended\n// to its body instead of creating a new node.\n\npp.parseTopLevel = function(node) {\n  let first = true\n  if (!node.body) node.body = []\n  while (this.type !== tt.eof) {\n    let stmt = this.parseStatement(true, true)\n    node.body.push(stmt)\n    if (first) {\n      if (this.isUseStrict(stmt)) this.setStrict(true)\n      first = false\n    }\n  }\n  this.next()\n  if (this.options.ecmaVersion >= 6) {\n    node.sourceType = this.options.sourceType\n  }\n  return this.finishNode(node, \"Program\")\n}\n\nconst loopLabel = {kind: \"loop\"}, switchLabel = {kind: \"switch\"}\n\npp.isLet = function() {\n  if (this.type !== tt.name || this.options.ecmaVersion < 6 || this.value != \"let\") return false\n  skipWhiteSpace.lastIndex = this.pos\n  let skip = skipWhiteSpace.exec(this.input)\n  let next = this.pos + skip[0].length, nextCh = this.input.charCodeAt(next)\n  if (nextCh === 91 || nextCh == 123) return true // '{' and '['\n  if (isIdentifierStart(nextCh, true)) {\n    for (var pos = next + 1; isIdentifierChar(this.input.charCodeAt(pos), true); ++pos) {}\n    let ident = this.input.slice(next, pos)\n    if (!this.isKeyword(ident)) return true\n  }\n  return false\n}\n\n// Parse a single statement.\n//\n// If expecting a statement and finding a slash operator, parse a\n// regular expression literal. This is to handle cases like\n// `if (foo) /blah/.exec(foo)`, where looking at the previous token\n// does not help.\n\npp.parseStatement = function(declaration, topLevel) {\n  let starttype = this.type, node = this.startNode(), kind\n\n  if (this.isLet()) {\n    starttype = tt._var\n    kind = \"let\"\n  }\n\n  // Most types of statements are recognized by the keyword they\n  // start with. Many are trivial to parse, some require a bit of\n  // complexity.\n\n  switch (starttype) {\n  case tt._break: case tt._continue: return this.parseBreakContinueStatement(node, starttype.keyword)\n  case tt._debugger: return this.parseDebuggerStatement(node)\n  case tt._do: return this.parseDoStatement(node)\n  case tt._for: return this.parseForStatement(node)\n  case tt._function:\n    if (!declaration && this.options.ecmaVersion >= 6) this.unexpected()\n    return this.parseFunctionStatement(node)\n  case tt._class:\n    if (!declaration) this.unexpected()\n    return this.parseClass(node, true)\n  case tt._if: return this.parseIfStatement(node)\n  case tt._return: return this.parseReturnStatement(node)\n  case tt._switch: return this.parseSwitchStatement(node)\n  case tt._throw: return this.parseThrowStatement(node)\n  case tt._try: return this.parseTryStatement(node)\n  case tt._const: case tt._var:\n    kind = kind || this.value\n    if (!declaration && kind != \"var\") this.unexpected()\n    return this.parseVarStatement(node, kind)\n  case tt._while: return this.parseWhileStatement(node)\n  case tt._with: return this.parseWithStatement(node)\n  case tt.braceL: return this.parseBlock()\n  case tt.semi: return this.parseEmptyStatement(node)\n  case tt._export:\n  case tt._import:\n    if (!this.options.allowImportExportEverywhere) {\n      if (!topLevel)\n        this.raise(this.start, \"'import' and 'export' may only appear at the top level\")\n      if (!this.inModule)\n        this.raise(this.start, \"'import' and 'export' may appear only with 'sourceType: module'\")\n    }\n    return starttype === tt._import ? this.parseImport(node) : this.parseExport(node)\n\n    // If the statement does not start with a statement keyword or a\n    // brace, it's an ExpressionStatement or LabeledStatement. We\n    // simply start parsing an expression, and afterwards, if the\n    // next token is a colon and the expression was a simple\n    // Identifier node, we switch to interpreting it as a label.\n  default:\n    let maybeName = this.value, expr = this.parseExpression()\n    if (starttype === tt.name && expr.type === \"Identifier\" && this.eat(tt.colon))\n      return this.parseLabeledStatement(node, maybeName, expr)\n    else return this.parseExpressionStatement(node, expr)\n  }\n}\n\npp.parseBreakContinueStatement = function(node, keyword) {\n  let isBreak = keyword == \"break\"\n  this.next()\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.label = null\n  else if (this.type !== tt.name) this.unexpected()\n  else {\n    node.label = this.parseIdent()\n    this.semicolon()\n  }\n\n  // Verify that there is an actual destination to break or\n  // continue to.\n  for (var i = 0; i < this.labels.length; ++i) {\n    let lab = this.labels[i]\n    if (node.label == null || lab.name === node.label.name) {\n      if (lab.kind != null && (isBreak || lab.kind === \"loop\")) break\n      if (node.label && isBreak) break\n    }\n  }\n  if (i === this.labels.length) this.raise(node.start, \"Unsyntactic \" + keyword)\n  return this.finishNode(node, isBreak ? \"BreakStatement\" : \"ContinueStatement\")\n}\n\npp.parseDebuggerStatement = function(node) {\n  this.next()\n  this.semicolon()\n  return this.finishNode(node, \"DebuggerStatement\")\n}\n\npp.parseDoStatement = function(node) {\n  this.next()\n  this.labels.push(loopLabel)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  this.expect(tt._while)\n  node.test = this.parseParenExpression()\n  if (this.options.ecmaVersion >= 6)\n    this.eat(tt.semi)\n  else\n    this.semicolon()\n  return this.finishNode(node, \"DoWhileStatement\")\n}\n\n// Disambiguating between a `for` and a `for`/`in` or `for`/`of`\n// loop is non-trivial. Basically, we have to parse the init `var`\n// statement or expression, disallowing the `in` operator (see\n// the second parameter to `parseExpression`), and then check\n// whether the next token is `in` or `of`. When there is no init\n// part (semicolon immediately after the opening parenthesis), it\n// is a regular `for` loop.\n\npp.parseForStatement = function(node) {\n  this.next()\n  this.labels.push(loopLabel)\n  this.expect(tt.parenL)\n  if (this.type === tt.semi) return this.parseFor(node, null)\n  let isLet = this.isLet()\n  if (this.type === tt._var || this.type === tt._const || isLet) {\n    let init = this.startNode(), kind = isLet ? \"let\" : this.value\n    this.next()\n    this.parseVar(init, true, kind)\n    this.finishNode(init, \"VariableDeclaration\")\n    if ((this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) && init.declarations.length === 1 &&\n        !(kind !== \"var\" && init.declarations[0].init))\n      return this.parseForIn(node, init)\n    return this.parseFor(node, init)\n  }\n  let refDestructuringErrors = new DestructuringErrors\n  let init = this.parseExpression(true, refDestructuringErrors)\n  if (this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\"))) {\n    this.checkPatternErrors(refDestructuringErrors, true)\n    this.toAssignable(init)\n    this.checkLVal(init)\n    return this.parseForIn(node, init)\n  } else {\n    this.checkExpressionErrors(refDestructuringErrors, true)\n  }\n  return this.parseFor(node, init)\n}\n\npp.parseFunctionStatement = function(node) {\n  this.next()\n  return this.parseFunction(node, true)\n}\n\npp.parseIfStatement = function(node) {\n  this.next()\n  node.test = this.parseParenExpression()\n  node.consequent = this.parseStatement(false)\n  node.alternate = this.eat(tt._else) ? this.parseStatement(false) : null\n  return this.finishNode(node, \"IfStatement\")\n}\n\npp.parseReturnStatement = function(node) {\n  if (!this.inFunction && !this.options.allowReturnOutsideFunction)\n    this.raise(this.start, \"'return' outside of function\")\n  this.next()\n\n  // In `return` (and `break`/`continue`), the keywords with\n  // optional arguments, we eagerly look for a semicolon or the\n  // possibility to insert one.\n\n  if (this.eat(tt.semi) || this.insertSemicolon()) node.argument = null\n  else { node.argument = this.parseExpression(); this.semicolon() }\n  return this.finishNode(node, \"ReturnStatement\")\n}\n\npp.parseSwitchStatement = function(node) {\n  this.next()\n  node.discriminant = this.parseParenExpression()\n  node.cases = []\n  this.expect(tt.braceL)\n  this.labels.push(switchLabel)\n\n  // Statements under must be grouped (by label) in SwitchCase\n  // nodes. `cur` is used to keep the node that we are currently\n  // adding statements to.\n\n  for (var cur, sawDefault = false; this.type != tt.braceR;) {\n    if (this.type === tt._case || this.type === tt._default) {\n      let isCase = this.type === tt._case\n      if (cur) this.finishNode(cur, \"SwitchCase\")\n      node.cases.push(cur = this.startNode())\n      cur.consequent = []\n      this.next()\n      if (isCase) {\n        cur.test = this.parseExpression()\n      } else {\n        if (sawDefault) this.raiseRecoverable(this.lastTokStart, \"Multiple default clauses\")\n        sawDefault = true\n        cur.test = null\n      }\n      this.expect(tt.colon)\n    } else {\n      if (!cur) this.unexpected()\n      cur.consequent.push(this.parseStatement(true))\n    }\n  }\n  if (cur) this.finishNode(cur, \"SwitchCase\")\n  this.next() // Closing brace\n  this.labels.pop()\n  return this.finishNode(node, \"SwitchStatement\")\n}\n\npp.parseThrowStatement = function(node) {\n  this.next()\n  if (lineBreak.test(this.input.slice(this.lastTokEnd, this.start)))\n    this.raise(this.lastTokEnd, \"Illegal newline after throw\")\n  node.argument = this.parseExpression()\n  this.semicolon()\n  return this.finishNode(node, \"ThrowStatement\")\n}\n\n// Reused empty array added for node fields that are always empty.\n\nconst empty = []\n\npp.parseTryStatement = function(node) {\n  this.next()\n  node.block = this.parseBlock()\n  node.handler = null\n  if (this.type === tt._catch) {\n    let clause = this.startNode()\n    this.next()\n    this.expect(tt.parenL)\n    clause.param = this.parseBindingAtom()\n    this.checkLVal(clause.param, true)\n    this.expect(tt.parenR)\n    clause.body = this.parseBlock()\n    node.handler = this.finishNode(clause, \"CatchClause\")\n  }\n  node.finalizer = this.eat(tt._finally) ? this.parseBlock() : null\n  if (!node.handler && !node.finalizer)\n    this.raise(node.start, \"Missing catch or finally clause\")\n  return this.finishNode(node, \"TryStatement\")\n}\n\npp.parseVarStatement = function(node, kind) {\n  this.next()\n  this.parseVar(node, false, kind)\n  this.semicolon()\n  return this.finishNode(node, \"VariableDeclaration\")\n}\n\npp.parseWhileStatement = function(node) {\n  this.next()\n  node.test = this.parseParenExpression()\n  this.labels.push(loopLabel)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, \"WhileStatement\")\n}\n\npp.parseWithStatement = function(node) {\n  if (this.strict) this.raise(this.start, \"'with' in strict mode\")\n  this.next()\n  node.object = this.parseParenExpression()\n  node.body = this.parseStatement(false)\n  return this.finishNode(node, \"WithStatement\")\n}\n\npp.parseEmptyStatement = function(node) {\n  this.next()\n  return this.finishNode(node, \"EmptyStatement\")\n}\n\npp.parseLabeledStatement = function(node, maybeName, expr) {\n  for (let i = 0; i < this.labels.length; ++i)\n    if (this.labels[i].name === maybeName) this.raise(expr.start, \"Label '\" + maybeName + \"' is already declared\")\n  let kind = this.type.isLoop ? \"loop\" : this.type === tt._switch ? \"switch\" : null\n  for (let i = this.labels.length - 1; i >= 0; i--) {\n    let label = this.labels[i]\n    if (label.statementStart == node.start) {\n      label.statementStart = this.start\n      label.kind = kind\n    } else break\n  }\n  this.labels.push({name: maybeName, kind: kind, statementStart: this.start})\n  node.body = this.parseStatement(true)\n  this.labels.pop()\n  node.label = expr\n  return this.finishNode(node, \"LabeledStatement\")\n}\n\npp.parseExpressionStatement = function(node, expr) {\n  node.expression = expr\n  this.semicolon()\n  return this.finishNode(node, \"ExpressionStatement\")\n}\n\n// Parse a semicolon-enclosed block of statements, handling `\"use\n// strict\"` declarations when `allowStrict` is true (used for\n// function bodies).\n\npp.parseBlock = function(allowStrict) {\n  let node = this.startNode(), first = true, oldStrict\n  node.body = []\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    let stmt = this.parseStatement(true)\n    node.body.push(stmt)\n    if (first && allowStrict && this.isUseStrict(stmt)) {\n      oldStrict = this.strict\n      this.setStrict(this.strict = true)\n    }\n    first = false\n  }\n  if (oldStrict === false) this.setStrict(false)\n  return this.finishNode(node, \"BlockStatement\")\n}\n\n// Parse a regular `for` loop. The disambiguation code in\n// `parseStatement` will already have parsed the init statement or\n// expression.\n\npp.parseFor = function(node, init) {\n  node.init = init\n  this.expect(tt.semi)\n  node.test = this.type === tt.semi ? null : this.parseExpression()\n  this.expect(tt.semi)\n  node.update = this.type === tt.parenR ? null : this.parseExpression()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, \"ForStatement\")\n}\n\n// Parse a `for`/`in` and `for`/`of` loop, which are almost\n// same from parser's perspective.\n\npp.parseForIn = function(node, init) {\n  let type = this.type === tt._in ? \"ForInStatement\" : \"ForOfStatement\"\n  this.next()\n  node.left = init\n  node.right = this.parseExpression()\n  this.expect(tt.parenR)\n  node.body = this.parseStatement(false)\n  this.labels.pop()\n  return this.finishNode(node, type)\n}\n\n// Parse a list of variable declarations.\n\npp.parseVar = function(node, isFor, kind) {\n  node.declarations = []\n  node.kind = kind\n  for (;;) {\n    let decl = this.startNode()\n    this.parseVarId(decl)\n    if (this.eat(tt.eq)) {\n      decl.init = this.parseMaybeAssign(isFor)\n    } else if (kind === \"const\" && !(this.type === tt._in || (this.options.ecmaVersion >= 6 && this.isContextual(\"of\")))) {\n      this.unexpected()\n    } else if (decl.id.type != \"Identifier\" && !(isFor && (this.type === tt._in || this.isContextual(\"of\")))) {\n      this.raise(this.lastTokEnd, \"Complex binding patterns require an initialization value\")\n    } else {\n      decl.init = null\n    }\n    node.declarations.push(this.finishNode(decl, \"VariableDeclarator\"))\n    if (!this.eat(tt.comma)) break\n  }\n  return node\n}\n\npp.parseVarId = function(decl) {\n  decl.id = this.parseBindingAtom()\n  this.checkLVal(decl.id, true)\n}\n\n// Parse a function declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseFunction = function(node, isStatement, allowExpressionBody) {\n  this.initFunction(node)\n  if (this.options.ecmaVersion >= 6)\n    node.generator = this.eat(tt.star)\n  var oldInGen = this.inGenerator\n  this.inGenerator = node.generator\n  if (isStatement || this.type === tt.name)\n    node.id = this.parseIdent()\n  this.parseFunctionParams(node)\n  this.parseFunctionBody(node, allowExpressionBody)\n  this.inGenerator = oldInGen\n  return this.finishNode(node, isStatement ? \"FunctionDeclaration\" : \"FunctionExpression\")\n}\n\npp.parseFunctionParams = function(node) {\n  this.expect(tt.parenL)\n  node.params = this.parseBindingList(tt.parenR, false, false, true)\n}\n\n// Parse a class declaration or literal (depending on the\n// `isStatement` parameter).\n\npp.parseClass = function(node, isStatement) {\n  this.next()\n  this.parseClassId(node, isStatement)\n  this.parseClassSuper(node)\n  let classBody = this.startNode()\n  let hadConstructor = false\n  classBody.body = []\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (this.eat(tt.semi)) continue\n    let method = this.startNode()\n    let isGenerator = this.eat(tt.star)\n    let isMaybeStatic = this.type === tt.name && this.value === \"static\"\n    this.parsePropertyName(method)\n    method.static = isMaybeStatic && this.type !== tt.parenL\n    if (method.static) {\n      if (isGenerator) this.unexpected()\n      isGenerator = this.eat(tt.star)\n      this.parsePropertyName(method)\n    }\n    method.kind = \"method\"\n    let isGetSet = false\n    if (!method.computed) {\n      let {key} = method\n      if (!isGenerator && key.type === \"Identifier\" && this.type !== tt.parenL && (key.name === \"get\" || key.name === \"set\")) {\n        isGetSet = true\n        method.kind = key.name\n        key = this.parsePropertyName(method)\n      }\n      if (!method.static && (key.type === \"Identifier\" && key.name === \"constructor\" ||\n          key.type === \"Literal\" && key.value === \"constructor\")) {\n        if (hadConstructor) this.raise(key.start, \"Duplicate constructor in the same class\")\n        if (isGetSet) this.raise(key.start, \"Constructor can't have get/set modifier\")\n        if (isGenerator) this.raise(key.start, \"Constructor can't be a generator\")\n        method.kind = \"constructor\"\n        hadConstructor = true\n      }\n    }\n    this.parseClassMethod(classBody, method, isGenerator)\n    if (isGetSet) {\n      let paramCount = method.kind === \"get\" ? 0 : 1\n      if (method.value.params.length !== paramCount) {\n        let start = method.value.start\n        if (method.kind === \"get\")\n          this.raiseRecoverable(start, \"getter should have no params\")\n        else\n          this.raiseRecoverable(start, \"setter should have exactly one param\")\n      }\n      if (method.kind === \"set\" && method.value.params[0].type === \"RestElement\")\n        this.raise(method.value.params[0].start, \"Setter cannot use rest params\")\n    }\n  }\n  node.body = this.finishNode(classBody, \"ClassBody\")\n  return this.finishNode(node, isStatement ? \"ClassDeclaration\" : \"ClassExpression\")\n}\n\npp.parseClassMethod = function(classBody, method, isGenerator) {\n  method.value = this.parseMethod(isGenerator)\n  classBody.body.push(this.finishNode(method, \"MethodDefinition\"))\n}\n\npp.parseClassId = function(node, isStatement) {\n  node.id = this.type === tt.name ? this.parseIdent() : isStatement ? this.unexpected() : null\n}\n\npp.parseClassSuper = function(node) {\n  node.superClass = this.eat(tt._extends) ? this.parseExprSubscripts() : null\n}\n\n// Parses module export declaration.\n\npp.parseExport = function(node) {\n  this.next()\n  // export * from '...'\n  if (this.eat(tt.star)) {\n    this.expectContextual(\"from\")\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    this.semicolon()\n    return this.finishNode(node, \"ExportAllDeclaration\")\n  }\n  if (this.eat(tt._default)) { // export default ...\n    let parens = this.type == tt.parenL\n    let expr = this.parseMaybeAssign()\n    let needsSemi = true\n    if (!parens && (expr.type == \"FunctionExpression\" ||\n                    expr.type == \"ClassExpression\")) {\n      needsSemi = false\n      if (expr.id) {\n        expr.type = expr.type == \"FunctionExpression\"\n          ? \"FunctionDeclaration\"\n          : \"ClassDeclaration\"\n      }\n    }\n    node.declaration = expr\n    if (needsSemi) this.semicolon()\n    return this.finishNode(node, \"ExportDefaultDeclaration\")\n  }\n  // export var|const|let|function|class ...\n  if (this.shouldParseExportStatement()) {\n    node.declaration = this.parseStatement(true)\n    node.specifiers = []\n    node.source = null\n  } else { // export { x, y as z } [from '...']\n    node.declaration = null\n    node.specifiers = this.parseExportSpecifiers()\n    if (this.eatContextual(\"from\")) {\n      node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n    } else {\n      // check for keywords used as local names\n      for (let i = 0; i < node.specifiers.length; i++) {\n        if (this.keywords.test(node.specifiers[i].local.name) || this.reservedWords.test(node.specifiers[i].local.name)) {\n          this.unexpected(node.specifiers[i].local.start)\n        }\n      }\n\n      node.source = null\n    }\n    this.semicolon()\n  }\n  return this.finishNode(node, \"ExportNamedDeclaration\")\n}\n\npp.shouldParseExportStatement = function() {\n  return this.type.keyword || this.isLet()\n}\n\n// Parses a comma-separated list of module exports.\n\npp.parseExportSpecifiers = function() {\n  let nodes = [], first = true\n  // export { x, y as z } [from '...']\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this.expect(tt.comma)\n      if (this.afterTrailingComma(tt.braceR)) break\n    } else first = false\n\n    let node = this.startNode()\n    node.local = this.parseIdent(this.type === tt._default)\n    node.exported = this.eatContextual(\"as\") ? this.parseIdent(true) : node.local\n    nodes.push(this.finishNode(node, \"ExportSpecifier\"))\n  }\n  return nodes\n}\n\n// Parses import declaration.\n\npp.parseImport = function(node) {\n  this.next()\n  // import '...'\n  if (this.type === tt.string) {\n    node.specifiers = empty\n    node.source = this.parseExprAtom()\n  } else {\n    node.specifiers = this.parseImportSpecifiers()\n    this.expectContextual(\"from\")\n    node.source = this.type === tt.string ? this.parseExprAtom() : this.unexpected()\n  }\n  this.semicolon()\n  return this.finishNode(node, \"ImportDeclaration\")\n}\n\n// Parses a comma-separated list of module imports.\n\npp.parseImportSpecifiers = function() {\n  let nodes = [], first = true\n  if (this.type === tt.name) {\n    // import defaultObj, { x, y as z } from '...'\n    let node = this.startNode()\n    node.local = this.parseIdent()\n    this.checkLVal(node.local, true)\n    nodes.push(this.finishNode(node, \"ImportDefaultSpecifier\"))\n    if (!this.eat(tt.comma)) return nodes\n  }\n  if (this.type === tt.star) {\n    let node = this.startNode()\n    this.next()\n    this.expectContextual(\"as\")\n    node.local = this.parseIdent()\n    this.checkLVal(node.local, true)\n    nodes.push(this.finishNode(node, \"ImportNamespaceSpecifier\"))\n    return nodes\n  }\n  this.expect(tt.braceL)\n  while (!this.eat(tt.braceR)) {\n    if (!first) {\n      this.expect(tt.comma)\n      if (this.afterTrailingComma(tt.braceR)) break\n    } else first = false\n\n    let node = this.startNode()\n    node.imported = this.parseIdent(true)\n    if (this.eatContextual(\"as\")) {\n      node.local = this.parseIdent()\n    } else {\n      node.local = node.imported\n      if (this.isKeyword(node.local.name)) this.unexpected(node.local.start)\n      if (this.reservedWordsStrict.test(node.local.name)) this.raise(node.local.start, \"The keyword '\" + node.local.name + \"' is reserved\")\n    }\n    this.checkLVal(node.local, true)\n    nodes.push(this.finishNode(node, \"ImportSpecifier\"))\n  }\n  return nodes\n}\n"]}