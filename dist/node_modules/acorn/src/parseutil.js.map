{"version":3,"sources":["../../../../node_modules/acorn/src/parseutil.js"],"names":["pp","prototype","literal","strictDirective","start","lastIndex","exec","input","length","match","slice","eat","type","next","isContextual","name","value","eatContextual","expectContextual","unexpected","canInsertSemicolon","eof","braceR","test","lastTokEnd","insertSemicolon","options","onInsertedSemicolon","lastTokEndLoc","semicolon","semi","afterTrailingComma","tokType","notNext","onTrailingComma","lastTokStart","lastTokStartLoc","expect","pos","raise","DestructuringErrors","shorthandAssign","trailingComma","parenthesizedAssign","parenthesizedBind","checkPatternErrors","refDestructuringErrors","isAssign","raiseRecoverable","parens","checkExpressionErrors","andThrow","checkYieldAwaitInDefaultParams","yieldPos","awaitPos","isSimpleAssignTarget","expr","expression"],"mappings":"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","file":"parseutil.js","sourcesContent":["import {types as tt} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {lineBreak, skipWhiteSpace} from \"./whitespace\"\n\nconst pp = Parser.prototype\n\n// ## Parser utilities\n\nconst literal = /^(?:'((?:[^']|\\.)*)'|\"((?:[^\"]|\\.)*)\"|;)/\npp.strictDirective = function(start) {\n  for (;;) {\n    skipWhiteSpace.lastIndex = start\n    start += skipWhiteSpace.exec(this.input)[0].length\n    let match = literal.exec(this.input.slice(start))\n    if (!match) return false\n    if ((match[1] || match[2]) == \"use strict\") return true\n    start += match[0].length\n  }\n}\n\n// Predicate that tests whether the next token is of the given\n// type, and if yes, consumes it as a side effect.\n\npp.eat = function(type) {\n  if (this.type === type) {\n    this.next()\n    return true\n  } else {\n    return false\n  }\n}\n\n// Tests whether parsed token is a contextual keyword.\n\npp.isContextual = function(name) {\n  return this.type === tt.name && this.value === name\n}\n\n// Consumes contextual keyword if possible.\n\npp.eatContextual = function(name) {\n  return this.value === name && this.eat(tt.name)\n}\n\n// Asserts that following token is given contextual keyword.\n\npp.expectContextual = function(name) {\n  if (!this.eatContextual(name)) this.unexpected()\n}\n\n// Test whether a semicolon can be inserted at the current position.\n\npp.canInsertSemicolon = function() {\n  return this.type === tt.eof ||\n    this.type === tt.braceR ||\n    lineBreak.test(this.input.slice(this.lastTokEnd, this.start))\n}\n\npp.insertSemicolon = function() {\n  if (this.canInsertSemicolon()) {\n    if (this.options.onInsertedSemicolon)\n      this.options.onInsertedSemicolon(this.lastTokEnd, this.lastTokEndLoc)\n    return true\n  }\n}\n\n// Consume a semicolon, or, failing that, see if we are allowed to\n// pretend that there is a semicolon at this position.\n\npp.semicolon = function() {\n  if (!this.eat(tt.semi) && !this.insertSemicolon()) this.unexpected()\n}\n\npp.afterTrailingComma = function(tokType, notNext) {\n  if (this.type == tokType) {\n    if (this.options.onTrailingComma)\n      this.options.onTrailingComma(this.lastTokStart, this.lastTokStartLoc)\n    if (!notNext)\n      this.next()\n    return true\n  }\n}\n\n// Expect a token of a given type. If found, consume it, otherwise,\n// raise an unexpected token error.\n\npp.expect = function(type) {\n  this.eat(type) || this.unexpected()\n}\n\n// Raise an unexpected token error.\n\npp.unexpected = function(pos) {\n  this.raise(pos != null ? pos : this.start, \"Unexpected token\")\n}\n\nexport class DestructuringErrors {\n  constructor() {\n    this.shorthandAssign = this.trailingComma = this.parenthesizedAssign = this.parenthesizedBind = -1\n  }\n}\n\npp.checkPatternErrors = function(refDestructuringErrors, isAssign) {\n  if (!refDestructuringErrors) return\n  if (refDestructuringErrors.trailingComma > -1)\n    this.raiseRecoverable(refDestructuringErrors.trailingComma, \"Comma is not permitted after the rest element\")\n  let parens = isAssign ? refDestructuringErrors.parenthesizedAssign : refDestructuringErrors.parenthesizedBind\n  if (parens > -1) this.raiseRecoverable(parens, \"Parenthesized pattern\")\n}\n\npp.checkExpressionErrors = function(refDestructuringErrors, andThrow) {\n  let pos = refDestructuringErrors ? refDestructuringErrors.shorthandAssign : -1\n  if (!andThrow) return pos >= 0\n  if (pos > -1) this.raise(pos, \"Shorthand property assignments are valid only in destructuring patterns\")\n}\n\npp.checkYieldAwaitInDefaultParams = function() {\n  if (this.yieldPos && (!this.awaitPos || this.yieldPos < this.awaitPos))\n    this.raise(this.yieldPos, \"Yield expression cannot be a default value\")\n  if (this.awaitPos)\n    this.raise(this.awaitPos, \"Await expression cannot be a default value\")\n}\n\npp.isSimpleAssignTarget = function(expr) {\n  if (expr.type === \"ParenthesizedExpression\")\n    return this.isSimpleAssignTarget(expr.expression)\n  return expr.type === \"Identifier\" || expr.type === \"MemberExpression\"\n}\n"]}