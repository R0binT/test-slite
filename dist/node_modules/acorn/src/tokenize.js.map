{"version":3,"sources":["../../../../node_modules/acorn/src/tokenize.js"],"names":["Token","p","type","value","start","end","options","locations","loc","startLoc","endLoc","ranges","range","pp","prototype","isRhino","Packages","Object","toString","call","next","onToken","lastTokEnd","lastTokStart","lastTokEndLoc","lastTokStartLoc","nextToken","getToken","Symbol","iterator","token","done","eof","curContext","context","length","preserveSpace","skipSpace","pos","curPosition","input","finishToken","override","readToken","fullCharCodeAtPos","code","ecmaVersion","readWord","getTokenFromCode","charCodeAt","skipBlockComment","onComment","indexOf","raise","lastIndex","match","exec","index","curLine","lineStart","slice","skipLineComment","startSkip","ch","loop","test","String","fromCharCode","val","prevType","updateContext","readToken_dot","readNumber","next2","ellipsis","dot","readToken_slash","exprAllowed","readRegexp","finishOp","assign","slash","readToken_mult_modulo_exp","size","tokentype","star","modulo","starstar","readToken_pipe_amp","logicalOR","logicalAND","bitwiseOR","bitwiseAND","readToken_caret","bitwiseXOR","readToken_plus_min","incDec","plusMin","readToken_lt_gt","bitShift","inModule","unexpected","relational","readToken_eq_excl","equality","arrow","eq","prefix","parenL","parenR","semi","comma","bracketL","bracketR","braceL","braceR","colon","question","backQuote","readRadixNumber","readString","codePointToString","str","tryCreateRegexp","src","flags","throwErrorAt","parser","RegExp","e","undefined","SyntaxError","message","regexpUnicodeSupport","escaped","inClass","charAt","content","mods","readWord1","tmp","tmpFlags","validFlags","replace","_match","offset","Number","regexp","pattern","readInt","radix","len","total","i","Infinity","num","startsWithDot","isFloat","octal","parseFloat","parseInt","strict","readCodePoint","codePos","readHexChar","quote","out","chunkStart","readEscapedChar","string","readTmplToken","template","dollarBraceL","inTemplate","octalStr","substr","n","containsEsc","word","first","astral","escStart","esc","name","keywords","raiseRecoverable"],"mappings":";;;;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;AAEA;AACA;AACA;;IAEaA,K,WAAAA,K,GACX,eAAYC,CAAZ,EAAe;AAAA;;AACb,OAAKC,IAAL,GAAYD,EAAEC,IAAd;AACA,OAAKC,KAAL,GAAaF,EAAEE,KAAf;AACA,OAAKC,KAAL,GAAaH,EAAEG,KAAf;AACA,OAAKC,GAAL,GAAWJ,EAAEI,GAAb;AACA,MAAIJ,EAAEK,OAAF,CAAUC,SAAd,EACE,KAAKC,GAAL,GAAW,4BAAmBP,CAAnB,EAAsBA,EAAEQ,QAAxB,EAAkCR,EAAES,MAApC,CAAX;AACF,MAAIT,EAAEK,OAAF,CAAUK,MAAd,EACE,KAAKC,KAAL,GAAa,CAACX,EAAEG,KAAH,EAAUH,EAAEI,GAAZ,CAAb;AACH,C;;AAGH;;AAEA,IAAMQ,KAAK,cAAOC,SAAlB;;AAEA;AACA,IAAMC,UAAU,QAAOC,QAAP,yCAAOA,QAAP,MAAmB,QAAnB,IAA+BC,OAAOH,SAAP,CAAiBI,QAAjB,CAA0BC,IAA1B,CAA+BH,QAA/B,KAA4C,sBAA3F;;AAEA;;AAEAH,GAAGO,IAAH,GAAU,YAAW;AACnB,MAAI,KAAKd,OAAL,CAAae,OAAjB,EACE,KAAKf,OAAL,CAAae,OAAb,CAAqB,IAAIrB,KAAJ,CAAU,IAAV,CAArB;;AAEF,OAAKsB,UAAL,GAAkB,KAAKjB,GAAvB;AACA,OAAKkB,YAAL,GAAoB,KAAKnB,KAAzB;AACA,OAAKoB,aAAL,GAAqB,KAAKd,MAA1B;AACA,OAAKe,eAAL,GAAuB,KAAKhB,QAA5B;AACA,OAAKiB,SAAL;AACD,CATD;;AAWAb,GAAGc,QAAH,GAAc,YAAW;AACvB,OAAKP,IAAL;AACA,SAAO,IAAIpB,KAAJ,CAAU,IAAV,CAAP;AACD,CAHD;;AAKA;AACA,IAAI,OAAO4B,MAAP,KAAkB,WAAtB,EACEf,GAAGe,OAAOC,QAAV,IAAsB,YAAW;AAAA;;AAC/B,SAAO;AACLT,UAAM,gBAAM;AACV,UAAIU,QAAQ,MAAKH,QAAL,EAAZ;AACA,aAAO;AACLI,cAAMD,MAAM5B,IAAN,KAAe,iBAAG8B,GADnB;AAEL7B,eAAO2B;AAFF,OAAP;AAID;AAPI,GAAP;AASD,CAVD;;AAYF;AACA;;AAEAjB,GAAGoB,UAAH,GAAgB,YAAW;AACzB,SAAO,KAAKC,OAAL,CAAa,KAAKA,OAAL,CAAaC,MAAb,GAAsB,CAAnC,CAAP;AACD,CAFD;;AAIA;AACA;;AAEAtB,GAAGa,SAAH,GAAe,YAAW;AACxB,MAAIO,aAAa,KAAKA,UAAL,EAAjB;AACA,MAAI,CAACA,UAAD,IAAe,CAACA,WAAWG,aAA/B,EAA8C,KAAKC,SAAL;;AAE9C,OAAKjC,KAAL,GAAa,KAAKkC,GAAlB;AACA,MAAI,KAAKhC,OAAL,CAAaC,SAAjB,EAA4B,KAAKE,QAAL,GAAgB,KAAK8B,WAAL,EAAhB;AAC5B,MAAI,KAAKD,GAAL,IAAY,KAAKE,KAAL,CAAWL,MAA3B,EAAmC,OAAO,KAAKM,WAAL,CAAiB,iBAAGT,GAApB,CAAP;;AAEnC,MAAIC,WAAWS,QAAf,EAAyB,OAAOT,WAAWS,QAAX,CAAoB,IAApB,CAAP,CAAzB,KACK,KAAKC,SAAL,CAAe,KAAKC,iBAAL,EAAf;AACN,CAVD;;AAYA/B,GAAG8B,SAAH,GAAe,UAASE,IAAT,EAAe;AAC5B;AACA;AACA,MAAI,mCAAkBA,IAAlB,EAAwB,KAAKvC,OAAL,CAAawC,WAAb,IAA4B,CAApD,KAA0DD,SAAS,EAAvE,CAA0E,SAA1E,EACE,OAAO,KAAKE,QAAL,EAAP;;AAEF,SAAO,KAAKC,gBAAL,CAAsBH,IAAtB,CAAP;AACD,CAPD;;AASAhC,GAAG+B,iBAAH,GAAuB,YAAW;AAChC,MAAIC,OAAO,KAAKL,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAX;AACA,MAAIO,QAAQ,MAAR,IAAkBA,QAAQ,MAA9B,EAAsC,OAAOA,IAAP;AACtC,MAAIzB,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,SAAO,CAACO,QAAQ,EAAT,IAAezB,IAAf,GAAsB,SAA7B;AACD,CALD;;AAOAP,GAAGqC,gBAAH,GAAsB,YAAW;AAC/B,MAAIzC,WAAW,KAAKH,OAAL,CAAa6C,SAAb,IAA0B,KAAKZ,WAAL,EAAzC;AACA,MAAInC,QAAQ,KAAKkC,GAAjB;AAAA,MAAsBjC,MAAM,KAAKmC,KAAL,CAAWY,OAAX,CAAmB,IAAnB,EAAyB,KAAKd,GAAL,IAAY,CAArC,CAA5B;AACA,MAAIjC,QAAQ,CAAC,CAAb,EAAgB,KAAKgD,KAAL,CAAW,KAAKf,GAAL,GAAW,CAAtB,EAAyB,sBAAzB;AAChB,OAAKA,GAAL,GAAWjC,MAAM,CAAjB;AACA,MAAI,KAAKC,OAAL,CAAaC,SAAjB,EAA4B;AAC1B,2BAAW+C,SAAX,GAAuBlD,KAAvB;AACA,QAAImD,cAAJ;AACA,WAAO,CAACA,QAAQ,uBAAWC,IAAX,CAAgB,KAAKhB,KAArB,CAAT,KAAyCe,MAAME,KAAN,GAAc,KAAKnB,GAAnE,EAAwE;AACtE,QAAE,KAAKoB,OAAP;AACA,WAAKC,SAAL,GAAiBJ,MAAME,KAAN,GAAcF,MAAM,CAAN,EAASpB,MAAxC;AACD;AACF;AACD,MAAI,KAAK7B,OAAL,CAAa6C,SAAjB,EACE,KAAK7C,OAAL,CAAa6C,SAAb,CAAuB,IAAvB,EAA6B,KAAKX,KAAL,CAAWoB,KAAX,CAAiBxD,QAAQ,CAAzB,EAA4BC,GAA5B,CAA7B,EAA+DD,KAA/D,EAAsE,KAAKkC,GAA3E,EACuB7B,QADvB,EACiC,KAAK8B,WAAL,EADjC;AAEH,CAhBD;;AAkBA1B,GAAGgD,eAAH,GAAqB,UAASC,SAAT,EAAoB;AACvC,MAAI1D,QAAQ,KAAKkC,GAAjB;AACA,MAAI7B,WAAW,KAAKH,OAAL,CAAa6C,SAAb,IAA0B,KAAKZ,WAAL,EAAzC;AACA,MAAIwB,KAAK,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,IAAYwB,SAAlC,CAAT;AACA,SAAO,KAAKxB,GAAL,GAAW,KAAKE,KAAL,CAAWL,MAAtB,IAAgC4B,OAAO,EAAvC,IAA6CA,OAAO,EAApD,IAA0DA,OAAO,IAAjE,IAAyEA,OAAO,IAAvF,EAA6F;AAC3F,MAAE,KAAKzB,GAAP;AACAyB,SAAK,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAL;AACD;AACD,MAAI,KAAKhC,OAAL,CAAa6C,SAAjB,EACE,KAAK7C,OAAL,CAAa6C,SAAb,CAAuB,KAAvB,EAA8B,KAAKX,KAAL,CAAWoB,KAAX,CAAiBxD,QAAQ0D,SAAzB,EAAoC,KAAKxB,GAAzC,CAA9B,EAA6ElC,KAA7E,EAAoF,KAAKkC,GAAzF,EACuB7B,QADvB,EACiC,KAAK8B,WAAL,EADjC;AAEH,CAXD;;AAaA;AACA;;AAEA1B,GAAGwB,SAAH,GAAe,YAAW;AACxB2B,QAAM,OAAO,KAAK1B,GAAL,GAAW,KAAKE,KAAL,CAAWL,MAA7B,EAAqC;AACzC,QAAI4B,KAAK,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAT;AACA,YAAQyB,EAAR;AACA,WAAK,EAAL,CAAS,KAAK,GAAL;AAAU;AACjB,UAAE,KAAKzB,GAAP;AACA;AACF,WAAK,EAAL;AACE,YAAI,KAAKE,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,MAAwC,EAA5C,EAAgD;AAC9C,YAAE,KAAKA,GAAP;AACD;AACH,WAAK,EAAL,CAAS,KAAK,IAAL,CAAW,KAAK,IAAL;AAClB,UAAE,KAAKA,GAAP;AACA,YAAI,KAAKhC,OAAL,CAAaC,SAAjB,EAA4B;AAC1B,YAAE,KAAKmD,OAAP;AACA,eAAKC,SAAL,GAAiB,KAAKrB,GAAtB;AACD;AACD;AACF,WAAK,EAAL;AAAS;AACP,gBAAQ,KAAKE,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAR;AACA,eAAK,EAAL;AAAS;AACP,iBAAKY,gBAAL;AACA;AACF,eAAK,EAAL;AACE,iBAAKW,eAAL,CAAqB,CAArB;AACA;AACF;AACE,kBAAMG,IAAN;AARF;AAUA;AACF;AACE,YAAID,KAAK,CAAL,IAAUA,KAAK,EAAf,IAAqBA,MAAM,IAAN,IAAc,+BAAmBE,IAAnB,CAAwBC,OAAOC,YAAP,CAAoBJ,EAApB,CAAxB,CAAvC,EAAyF;AACvF,YAAE,KAAKzB,GAAP;AACD,SAFD,MAEO;AACL,gBAAM0B,IAAN;AACD;AAhCH;AAkCD;AACF,CAtCD;;AAwCA;AACA;AACA;AACA;;AAEAnD,GAAG4B,WAAH,GAAiB,UAASvC,IAAT,EAAekE,GAAf,EAAoB;AACnC,OAAK/D,GAAL,GAAW,KAAKiC,GAAhB;AACA,MAAI,KAAKhC,OAAL,CAAaC,SAAjB,EAA4B,KAAKG,MAAL,GAAc,KAAK6B,WAAL,EAAd;AAC5B,MAAI8B,WAAW,KAAKnE,IAApB;AACA,OAAKA,IAAL,GAAYA,IAAZ;AACA,OAAKC,KAAL,GAAaiE,GAAb;;AAEA,OAAKE,aAAL,CAAmBD,QAAnB;AACD,CARD;;AAUA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACAxD,GAAG0D,aAAH,GAAmB,YAAW;AAC5B,MAAInD,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAIlB,QAAQ,EAAR,IAAcA,QAAQ,EAA1B,EAA8B,OAAO,KAAKoD,UAAL,CAAgB,IAAhB,CAAP;AAC9B,MAAIC,QAAQ,KAAKjC,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAZ;AACA,MAAI,KAAKhC,OAAL,CAAawC,WAAb,IAA4B,CAA5B,IAAiC1B,SAAS,EAA1C,IAAgDqD,UAAU,EAA9D,EAAkE;AAAE;AAClE,SAAKnC,GAAL,IAAY,CAAZ;AACA,WAAO,KAAKG,WAAL,CAAiB,iBAAGiC,QAApB,CAAP;AACD,GAHD,MAGO;AACL,MAAE,KAAKpC,GAAP;AACA,WAAO,KAAKG,WAAL,CAAiB,iBAAGkC,GAApB,CAAP;AACD;AACF,CAXD;;AAaA9D,GAAG+D,eAAH,GAAqB,YAAW;AAAE;AAChC,MAAIxD,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAI,KAAKuC,WAAT,EAAsB;AAAE,MAAE,KAAKvC,GAAP,CAAY,OAAO,KAAKwC,UAAL,EAAP;AAA0B;AAC9D,MAAI1D,SAAS,EAAb,EAAiB,OAAO,KAAK2D,QAAL,CAAc,iBAAGC,MAAjB,EAAyB,CAAzB,CAAP;AACjB,SAAO,KAAKD,QAAL,CAAc,iBAAGE,KAAjB,EAAwB,CAAxB,CAAP;AACD,CALD;;AAOApE,GAAGqE,yBAAH,GAA+B,UAASrC,IAAT,EAAe;AAAE;AAC9C,MAAIzB,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAI6C,OAAO,CAAX;AACA,MAAIC,YAAYvC,SAAS,EAAT,GAAc,iBAAGwC,IAAjB,GAAwB,iBAAGC,MAA3C;;AAEA;AACA,MAAI,KAAKhF,OAAL,CAAawC,WAAb,IAA4B,CAA5B,IAAiC1B,SAAS,EAA9C,EAAkD;AAChD,MAAE+D,IAAF;AACAC,gBAAY,iBAAGG,QAAf;AACAnE,WAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAP;AACD;;AAED,MAAIlB,SAAS,EAAb,EAAiB,OAAO,KAAK2D,QAAL,CAAc,iBAAGC,MAAjB,EAAyBG,OAAO,CAAhC,CAAP;AACjB,SAAO,KAAKJ,QAAL,CAAcK,SAAd,EAAyBD,IAAzB,CAAP;AACD,CAdD;;AAgBAtE,GAAG2E,kBAAH,GAAwB,UAAS3C,IAAT,EAAe;AAAE;AACvC,MAAIzB,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAIlB,SAASyB,IAAb,EAAmB,OAAO,KAAKkC,QAAL,CAAclC,SAAS,GAAT,GAAe,iBAAG4C,SAAlB,GAA8B,iBAAGC,UAA/C,EAA2D,CAA3D,CAAP;AACnB,MAAItE,SAAS,EAAb,EAAiB,OAAO,KAAK2D,QAAL,CAAc,iBAAGC,MAAjB,EAAyB,CAAzB,CAAP;AACjB,SAAO,KAAKD,QAAL,CAAclC,SAAS,GAAT,GAAe,iBAAG8C,SAAlB,GAA8B,iBAAGC,UAA/C,EAA2D,CAA3D,CAAP;AACD,CALD;;AAOA/E,GAAGgF,eAAH,GAAqB,YAAW;AAAE;AAChC,MAAIzE,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAIlB,SAAS,EAAb,EAAiB,OAAO,KAAK2D,QAAL,CAAc,iBAAGC,MAAjB,EAAyB,CAAzB,CAAP;AACjB,SAAO,KAAKD,QAAL,CAAc,iBAAGe,UAAjB,EAA6B,CAA7B,CAAP;AACD,CAJD;;AAMAjF,GAAGkF,kBAAH,GAAwB,UAASlD,IAAT,EAAe;AAAE;AACvC,MAAIzB,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAIlB,SAASyB,IAAb,EAAmB;AACjB,QAAIzB,QAAQ,EAAR,IAAc,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,KAAuC,EAArD,IACA,sBAAU2B,IAAV,CAAe,KAAKzB,KAAL,CAAWoB,KAAX,CAAiB,KAAKtC,UAAtB,EAAkC,KAAKgB,GAAvC,CAAf,CADJ,EACiE;AAC/D;AACA,WAAKuB,eAAL,CAAqB,CAArB;AACA,WAAKxB,SAAL;AACA,aAAO,KAAKX,SAAL,EAAP;AACD;AACD,WAAO,KAAKqD,QAAL,CAAc,iBAAGiB,MAAjB,EAAyB,CAAzB,CAAP;AACD;AACD,MAAI5E,SAAS,EAAb,EAAiB,OAAO,KAAK2D,QAAL,CAAc,iBAAGC,MAAjB,EAAyB,CAAzB,CAAP;AACjB,SAAO,KAAKD,QAAL,CAAc,iBAAGkB,OAAjB,EAA0B,CAA1B,CAAP;AACD,CAdD;;AAgBApF,GAAGqF,eAAH,GAAqB,UAASrD,IAAT,EAAe;AAAE;AACpC,MAAIzB,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAI6C,OAAO,CAAX;AACA,MAAI/D,SAASyB,IAAb,EAAmB;AACjBsC,WAAOtC,SAAS,EAAT,IAAe,KAAKL,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,MAAwC,EAAvD,GAA4D,CAA5D,GAAgE,CAAvE;AACA,QAAI,KAAKE,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW6C,IAAjC,MAA2C,EAA/C,EAAmD,OAAO,KAAKJ,QAAL,CAAc,iBAAGC,MAAjB,EAAyBG,OAAO,CAAhC,CAAP;AACnD,WAAO,KAAKJ,QAAL,CAAc,iBAAGoB,QAAjB,EAA2BhB,IAA3B,CAAP;AACD;AACD,MAAI/D,QAAQ,EAAR,IAAcyB,QAAQ,EAAtB,IAA4B,KAAKL,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,KAAuC,EAAnE,IACA,KAAKE,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,KAAuC,EAD3C,EAC+C;AAC7C,QAAI,KAAK8D,QAAT,EAAmB,KAAKC;AACxB;AADmB,OAEnB,KAAKxC,eAAL,CAAqB,CAArB;AACA,SAAKxB,SAAL;AACA,WAAO,KAAKX,SAAL,EAAP;AACD;AACD,MAAIN,SAAS,EAAb,EAAiB+D,OAAO,CAAP;AACjB,SAAO,KAAKJ,QAAL,CAAc,iBAAGuB,UAAjB,EAA6BnB,IAA7B,CAAP;AACD,CAlBD;;AAoBAtE,GAAG0F,iBAAH,GAAuB,UAAS1D,IAAT,EAAe;AAAE;AACtC,MAAIzB,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,MAAIlB,SAAS,EAAb,EAAiB,OAAO,KAAK2D,QAAL,CAAc,iBAAGyB,QAAjB,EAA2B,KAAKhE,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,MAAwC,EAAxC,GAA6C,CAA7C,GAAiD,CAA5E,CAAP;AACjB,MAAIO,SAAS,EAAT,IAAezB,SAAS,EAAxB,IAA8B,KAAKd,OAAL,CAAawC,WAAb,IAA4B,CAA9D,EAAiE;AAAE;AACjE,SAAKR,GAAL,IAAY,CAAZ;AACA,WAAO,KAAKG,WAAL,CAAiB,iBAAGgE,KAApB,CAAP;AACD;AACD,SAAO,KAAK1B,QAAL,CAAclC,SAAS,EAAT,GAAc,iBAAG6D,EAAjB,GAAsB,iBAAGC,MAAvC,EAA+C,CAA/C,CAAP;AACD,CARD;;AAUA9F,GAAGmC,gBAAH,GAAsB,UAASH,IAAT,EAAe;AACnC,UAAQA,IAAR;AACE;AACA;AACF,SAAK,EAAL;AAAS;AACP,aAAO,KAAK0B;;AAEZ;AAFO,QAAP,CAGF,KAAK,EAAL;AAAS,QAAE,KAAKjC,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAGmE,MAApB,CAAP;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKtE,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAGoE,MAApB,CAAP;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKvE,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAGqE,IAApB,CAAP;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKxE,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAGsE,KAApB,CAAP;AACrB,SAAK,EAAL;AAAS,QAAE,KAAKzE,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAGuE,QAApB,CAAP;AACrB,SAAK,EAAL;AAAS,QAAE,KAAK1E,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAGwE,QAApB,CAAP;AACrB,SAAK,GAAL;AAAU,QAAE,KAAK3E,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAGyE,MAApB,CAAP;AACtB,SAAK,GAAL;AAAU,QAAE,KAAK5E,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAG0E,MAApB,CAAP;AACtB,SAAK,EAAL;AAAS,QAAE,KAAK7E,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAG2E,KAApB,CAAP;AACrB,SAAK,EAAL;AAAS,QAAE,KAAK9E,GAAP,CAAY,OAAO,KAAKG,WAAL,CAAiB,iBAAG4E,QAApB,CAAP;;AAErB,SAAK,EAAL;AAAS;AACP,UAAI,KAAK/G,OAAL,CAAawC,WAAb,GAA2B,CAA/B,EAAkC;AAClC,QAAE,KAAKR,GAAP;AACA,aAAO,KAAKG,WAAL,CAAiB,iBAAG6E,SAApB,CAAP;;AAEF,SAAK,EAAL;AAAS;AACP,UAAIlG,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,CAAX;AACA,UAAIlB,SAAS,GAAT,IAAgBA,SAAS,EAA7B,EAAiC,OAAO,KAAKmG,eAAL,CAAqB,EAArB,CAAyB;AAAzB,OAAP,CACjC,IAAI,KAAKjH,OAAL,CAAawC,WAAb,IAA4B,CAAhC,EAAmC;AACjC,YAAI1B,SAAS,GAAT,IAAgBA,SAAS,EAA7B,EAAiC,OAAO,KAAKmG,eAAL,CAAqB,CAArB,CAAwB;AAAxB,SAAP,CACjC,IAAInG,SAAS,EAAT,IAAeA,SAAS,EAA5B,EAAgC,OAAO,KAAKmG,eAAL,CAAqB,CAArB,CAAwB;AAAxB,SAAP;AACjC;AACD;AACA;AACF,SAAK,EAAL,CAAS,KAAK,EAAL,CAAS,KAAK,EAAL,CAAS,KAAK,EAAL,CAAS,KAAK,EAAL,CAAS,KAAK,EAAL,CAAS,KAAK,EAAL,CAAS,KAAK,EAAL,CAAS,KAAK,EAAL;AAAS;AAC/E,aAAO,KAAK/C,UAAL,CAAgB;;AAEvB;AAFO,OAAP,CAGF,KAAK,EAAL,CAAS,KAAK,EAAL;AAAS;AAChB,aAAO,KAAKgD,UAAL,CAAgB3E;;AAEvB;AACA;AACA;AACA;;AALO,OAAP,CAOF,KAAK,EAAL;AAAS;AACP,aAAO,KAAK+B,eAAL,EAAP;;AAEF,SAAK,EAAL,CAAS,KAAK,EAAL;AAAS;AAChB,aAAO,KAAKM,yBAAL,CAA+BrC,IAA/B,CAAP;;AAEF,SAAK,GAAL,CAAU,KAAK,EAAL;AAAS;AACjB,aAAO,KAAK2C,kBAAL,CAAwB3C,IAAxB,CAAP;;AAEF,SAAK,EAAL;AAAS;AACP,aAAO,KAAKgD,eAAL,EAAP;;AAEF,SAAK,EAAL,CAAS,KAAK,EAAL;AAAS;AAChB,aAAO,KAAKE,kBAAL,CAAwBlD,IAAxB,CAAP;;AAEF,SAAK,EAAL,CAAS,KAAK,EAAL;AAAS;AAChB,aAAO,KAAKqD,eAAL,CAAqBrD,IAArB,CAAP;;AAEF,SAAK,EAAL,CAAS,KAAK,EAAL;AAAS;AAChB,aAAO,KAAK0D,iBAAL,CAAuB1D,IAAvB,CAAP;;AAEF,SAAK,GAAL;AAAU;AACR,aAAO,KAAKkC,QAAL,CAAc,iBAAG4B,MAAjB,EAAyB,CAAzB,CAAP;AAlEF;;AAqEA,OAAKtD,KAAL,CAAW,KAAKf,GAAhB,EAAqB,2BAA2BmF,kBAAkB5E,IAAlB,CAA3B,GAAqD,GAA1E;AACD,CAvED;;AAyEAhC,GAAGkE,QAAH,GAAc,UAAS7E,IAAT,EAAeiF,IAAf,EAAqB;AACjC,MAAIuC,MAAM,KAAKlF,KAAL,CAAWoB,KAAX,CAAiB,KAAKtB,GAAtB,EAA2B,KAAKA,GAAL,GAAW6C,IAAtC,CAAV;AACA,OAAK7C,GAAL,IAAY6C,IAAZ;AACA,SAAO,KAAK1C,WAAL,CAAiBvC,IAAjB,EAAuBwH,GAAvB,CAAP;AACD,CAJD;;AAMA;AACA;;AAEA,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,KAA9B,EAAqCC,YAArC,EAAmDC,MAAnD,EAA2D;AACzD,MAAI;AACF,WAAO,IAAIC,MAAJ,CAAWJ,GAAX,EAAgBC,KAAhB,CAAP;AACD,GAFD,CAEE,OAAOI,CAAP,EAAU;AACV,QAAIH,iBAAiBI,SAArB,EAAgC;AAC9B,UAAID,aAAaE,WAAjB,EAA8BJ,OAAO1E,KAAP,CAAayE,YAAb,EAA2B,uCAAuCG,EAAEG,OAApE;AAC9B,YAAMH,CAAN;AACD;AACF;AACF;;AAED,IAAMI,uBAAuB,CAAC,CAACV,gBAAgB,QAAhB,EAA0B,GAA1B,CAA/B;;AAEA9G,GAAGiE,UAAH,GAAgB,YAAW;AAAA;;AACzB,MAAIwD,gBAAJ;AAAA,MAAaC,gBAAb;AAAA,MAAsBnI,QAAQ,KAAKkC,GAAnC;AACA,WAAS;AACP,QAAI,KAAKA,GAAL,IAAY,KAAKE,KAAL,CAAWL,MAA3B,EAAmC,KAAKkB,KAAL,CAAWjD,KAAX,EAAkB,iCAAlB;AACnC,QAAI2D,KAAK,KAAKvB,KAAL,CAAWgG,MAAX,CAAkB,KAAKlG,GAAvB,CAAT;AACA,QAAI,sBAAU2B,IAAV,CAAeF,EAAf,CAAJ,EAAwB,KAAKV,KAAL,CAAWjD,KAAX,EAAkB,iCAAlB;AACxB,QAAI,CAACkI,OAAL,EAAc;AACZ,UAAIvE,OAAO,GAAX,EAAgBwE,UAAU,IAAV,CAAhB,KACK,IAAIxE,OAAO,GAAP,IAAcwE,OAAlB,EAA2BA,UAAU,KAAV,CAA3B,KACA,IAAIxE,OAAO,GAAP,IAAc,CAACwE,OAAnB,EAA4B;AACjCD,gBAAUvE,OAAO,IAAjB;AACD,KALD,MAKOuE,UAAU,KAAV;AACP,MAAE,KAAKhG,GAAP;AACD;AACD,MAAImG,UAAU,KAAKjG,KAAL,CAAWoB,KAAX,CAAiBxD,KAAjB,EAAwB,KAAKkC,GAA7B,CAAd;AACA,IAAE,KAAKA,GAAP;AACA;AACA;AACA,MAAIoG,OAAO,KAAKC,SAAL,EAAX;AACA,MAAIC,MAAMH,OAAV;AAAA,MAAmBI,WAAW,EAA9B;AACA,MAAIH,IAAJ,EAAU;AACR,QAAII,aAAa,UAAjB;AACA,QAAI,KAAKxI,OAAL,CAAawC,WAAb,IAA4B,CAAhC,EAAmCgG,aAAa,YAAb;AACnC,QAAI,CAACA,WAAW7E,IAAX,CAAgByE,IAAhB,CAAL,EAA4B,KAAKrF,KAAL,CAAWjD,KAAX,EAAkB,iCAAlB;AAC5B,QAAIsI,KAAKtF,OAAL,CAAa,GAAb,KAAqB,CAAzB,EAA4B;AAC1B,UAAIiF,oBAAJ,EAA0B;AACxBQ,mBAAW,GAAX;AACD,OAFD,MAEO;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAD,cAAMA,IAAIG,OAAJ,CAAY,wBAAZ,EAAsC,UAACC,MAAD,EAASnG,IAAT,EAAeoG,MAAf,EAA0B;AACpEpG,iBAAOqG,OAAO,OAAOrG,IAAd,CAAP;AACA,cAAIA,OAAO,QAAX,EAAqB,OAAKQ,KAAL,CAAWjD,QAAQ6I,MAAR,GAAiB,CAA5B,EAA+B,0BAA/B;AACrB,iBAAO,GAAP;AACD,SAJK,CAAN;AAKAL,cAAMA,IAAIG,OAAJ,CAAY,qDAAZ,EAAmE,GAAnE,CAAN;AACAF,mBAAWA,SAASE,OAAT,CAAiB,GAAjB,EAAsB,EAAtB,CAAX;AACD;AACF;AACF;AACD;AACA,MAAI5I,QAAQ,IAAZ;AACA;AACA;AACA,MAAI,CAACY,OAAL,EAAc;AACZ4G,oBAAgBiB,GAAhB,EAAqBC,QAArB,EAA+BzI,KAA/B,EAAsC;AACtC;AACA;AAFA,MAGAD,QAAQwH,gBAAgBc,OAAhB,EAAyBC,IAAzB,CAAR;AACD;AACD,SAAO,KAAKjG,WAAL,CAAiB,iBAAG0G,MAApB,EAA4B,EAACC,SAASX,OAAV,EAAmBZ,OAAOa,IAA1B,EAAgCvI,OAAOA,KAAvC,EAA5B,CAAP;AACD,CAzDD;;AA2DA;AACA;AACA;;AAEAU,GAAGwI,OAAH,GAAa,UAASC,KAAT,EAAgBC,GAAhB,EAAqB;AAChC,MAAInJ,QAAQ,KAAKkC,GAAjB;AAAA,MAAsBkH,QAAQ,CAA9B;AACA,OAAK,IAAIC,IAAI,CAAR,EAAWxB,IAAIsB,OAAO,IAAP,GAAcG,QAAd,GAAyBH,GAA7C,EAAkDE,IAAIxB,CAAtD,EAAyD,EAAEwB,CAA3D,EAA8D;AAC5D,QAAI5G,OAAO,KAAKL,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAX;AAAA,QAA4C8B,YAA5C;AACA,QAAIvB,QAAQ,EAAZ,EAAgBuB,MAAMvB,OAAO,EAAP,GAAY,EAAlB,CAAhB,CAAqC;AAArC,SACK,IAAIA,QAAQ,EAAZ,EAAgBuB,MAAMvB,OAAO,EAAP,GAAY,EAAlB,CAAhB,CAAqC;AAArC,WACA,IAAIA,QAAQ,EAAR,IAAcA,QAAQ,EAA1B,EAA8BuB,MAAMvB,OAAO,EAAb,CAA9B,CAA8C;AAA9C,aACAuB,MAAMsF,QAAN;AACL,QAAItF,OAAOkF,KAAX,EAAkB;AAClB,MAAE,KAAKhH,GAAP;AACAkH,YAAQA,QAAQF,KAAR,GAAgBlF,GAAxB;AACD;AACD,MAAI,KAAK9B,GAAL,KAAalC,KAAb,IAAsBmJ,OAAO,IAAP,IAAe,KAAKjH,GAAL,GAAWlC,KAAX,KAAqBmJ,GAA9D,EAAmE,OAAO,IAAP;;AAEnE,SAAOC,KAAP;AACD,CAfD;;AAiBA3I,GAAG0G,eAAH,GAAqB,UAAS+B,KAAT,EAAgB;AACnC,OAAKhH,GAAL,IAAY,CAAZ,CADmC,CACrB;AACd,MAAI8B,MAAM,KAAKiF,OAAL,CAAaC,KAAb,CAAV;AACA,MAAIlF,OAAO,IAAX,EAAiB,KAAKf,KAAL,CAAW,KAAKjD,KAAL,GAAa,CAAxB,EAA2B,8BAA8BkJ,KAAzD;AACjB,MAAI,mCAAkB,KAAK1G,iBAAL,EAAlB,CAAJ,EAAiD,KAAKS,KAAL,CAAW,KAAKf,GAAhB,EAAqB,kCAArB;AACjD,SAAO,KAAKG,WAAL,CAAiB,iBAAGkH,GAApB,EAAyBvF,GAAzB,CAAP;AACD,CAND;;AAQA;;AAEAvD,GAAG2D,UAAH,GAAgB,UAASoF,aAAT,EAAwB;AACtC,MAAIxJ,QAAQ,KAAKkC,GAAjB;AAAA,MAAsBuH,UAAU,KAAhC;AAAA,MAAuCC,QAAQ,KAAKtH,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,MAAoC,EAAnF;AACA,MAAI,CAACsH,aAAD,IAAkB,KAAKP,OAAL,CAAa,EAAb,MAAqB,IAA3C,EAAiD,KAAKhG,KAAL,CAAWjD,KAAX,EAAkB,gBAAlB;AACjD,MAAI0J,SAAS,KAAKxH,GAAL,IAAYlC,QAAQ,CAAjC,EAAoC0J,QAAQ,KAAR;AACpC,MAAI1I,OAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAX;AACA,MAAIlB,SAAS,EAAT,IAAe,CAAC0I,KAApB,EAA2B;AAAE;AAC3B,MAAE,KAAKxH,GAAP;AACA,SAAK+G,OAAL,CAAa,EAAb;AACAQ,cAAU,IAAV;AACAzI,WAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAP;AACD;AACD,MAAI,CAAClB,SAAS,EAAT,IAAeA,SAAS,GAAzB,KAAiC,CAAC0I,KAAtC,EAA6C;AAAE;AAC7C1I,WAAO,KAAKoB,KAAL,CAAWS,UAAX,CAAsB,EAAE,KAAKX,GAA7B,CAAP;AACA,QAAIlB,SAAS,EAAT,IAAeA,SAAS,EAA5B,EAAgC,EAAE,KAAKkB,GAAP,CAFW,CAEA;AAC3C,QAAI,KAAK+G,OAAL,CAAa,EAAb,MAAqB,IAAzB,EAA+B,KAAKhG,KAAL,CAAWjD,KAAX,EAAkB,gBAAlB;AAC/ByJ,cAAU,IAAV;AACD;AACD,MAAI,mCAAkB,KAAKjH,iBAAL,EAAlB,CAAJ,EAAiD,KAAKS,KAAL,CAAW,KAAKf,GAAhB,EAAqB,kCAArB;;AAEjD,MAAIoF,MAAM,KAAKlF,KAAL,CAAWoB,KAAX,CAAiBxD,KAAjB,EAAwB,KAAKkC,GAA7B,CAAV;AAAA,MAA6C8B,YAA7C;AACA,MAAIyF,OAAJ,EAAazF,MAAM2F,WAAWrC,GAAX,CAAN,CAAb,KACK,IAAI,CAACoC,KAAD,IAAUpC,IAAIvF,MAAJ,KAAe,CAA7B,EAAgCiC,MAAM4F,SAAStC,GAAT,EAAc,EAAd,CAAN,CAAhC,KACA,IAAI,OAAOzD,IAAP,CAAYyD,GAAZ,KAAoB,KAAKuC,MAA7B,EAAqC,KAAK5G,KAAL,CAAWjD,KAAX,EAAkB,gBAAlB,EAArC,KACAgE,MAAM4F,SAAStC,GAAT,EAAc,CAAd,CAAN;AACL,SAAO,KAAKjF,WAAL,CAAiB,iBAAGkH,GAApB,EAAyBvF,GAAzB,CAAP;AACD,CAzBD;;AA2BA;;AAEAvD,GAAGqJ,aAAH,GAAmB,YAAW;AAC5B,MAAInG,KAAK,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAT;AAAA,MAA0CO,aAA1C;;AAEA,MAAIkB,OAAO,GAAX,EAAgB;AACd,QAAI,KAAKzD,OAAL,CAAawC,WAAb,GAA2B,CAA/B,EAAkC,KAAKuD,UAAL;AAClC,QAAI8D,UAAU,EAAE,KAAK7H,GAArB;AACAO,WAAO,KAAKuH,WAAL,CAAiB,KAAK5H,KAAL,CAAWY,OAAX,CAAmB,GAAnB,EAAwB,KAAKd,GAA7B,IAAoC,KAAKA,GAA1D,CAAP;AACA,MAAE,KAAKA,GAAP;AACA,QAAIO,OAAO,QAAX,EAAqB,KAAKQ,KAAL,CAAW8G,OAAX,EAAoB,0BAApB;AACtB,GAND,MAMO;AACLtH,WAAO,KAAKuH,WAAL,CAAiB,CAAjB,CAAP;AACD;AACD,SAAOvH,IAAP;AACD,CAbD;;AAeA,SAAS4E,iBAAT,CAA2B5E,IAA3B,EAAiC;AAC/B;AACA,MAAIA,QAAQ,MAAZ,EAAoB,OAAOqB,OAAOC,YAAP,CAAoBtB,IAApB,CAAP;AACpBA,UAAQ,OAAR;AACA,SAAOqB,OAAOC,YAAP,CAAoB,CAACtB,QAAQ,EAAT,IAAe,MAAnC,EAA2C,CAACA,OAAO,IAAR,IAAgB,MAA3D,CAAP;AACD;;AAEDhC,GAAG2G,UAAH,GAAgB,UAAS6C,KAAT,EAAgB;AAC9B,MAAIC,MAAM,EAAV;AAAA,MAAcC,aAAa,EAAE,KAAKjI,GAAlC;AACA,WAAS;AACP,QAAI,KAAKA,GAAL,IAAY,KAAKE,KAAL,CAAWL,MAA3B,EAAmC,KAAKkB,KAAL,CAAW,KAAKjD,KAAhB,EAAuB,8BAAvB;AACnC,QAAI2D,KAAK,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAT;AACA,QAAIyB,OAAOsG,KAAX,EAAkB;AAClB,QAAItG,OAAO,EAAX,EAAe;AAAE;AACfuG,aAAO,KAAK9H,KAAL,CAAWoB,KAAX,CAAiB2G,UAAjB,EAA6B,KAAKjI,GAAlC,CAAP;AACAgI,aAAO,KAAKE,eAAL,CAAqB,KAArB,CAAP;AACAD,mBAAa,KAAKjI,GAAlB;AACD,KAJD,MAIO;AACL,UAAI,2BAAUyB,EAAV,CAAJ,EAAmB,KAAKV,KAAL,CAAW,KAAKjD,KAAhB,EAAuB,8BAAvB;AACnB,QAAE,KAAKkC,GAAP;AACD;AACF;AACDgI,SAAO,KAAK9H,KAAL,CAAWoB,KAAX,CAAiB2G,UAAjB,EAA6B,KAAKjI,GAAL,EAA7B,CAAP;AACA,SAAO,KAAKG,WAAL,CAAiB,iBAAGgI,MAApB,EAA4BH,GAA5B,CAAP;AACD,CAjBD;;AAmBA;;AAEAzJ,GAAG6J,aAAH,GAAmB,YAAW;AAC5B,MAAIJ,MAAM,EAAV;AAAA,MAAcC,aAAa,KAAKjI,GAAhC;AACA,WAAS;AACP,QAAI,KAAKA,GAAL,IAAY,KAAKE,KAAL,CAAWL,MAA3B,EAAmC,KAAKkB,KAAL,CAAW,KAAKjD,KAAhB,EAAuB,uBAAvB;AACnC,QAAI2D,KAAK,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,CAAT;AACA,QAAIyB,OAAO,EAAP,IAAaA,OAAO,EAAP,IAAa,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAAL,GAAW,CAAjC,MAAwC,GAAtE,EAA2E;AAAE;AAC3E,UAAI,KAAKA,GAAL,KAAa,KAAKlC,KAAlB,IAA2B,KAAKF,IAAL,KAAc,iBAAGyK,QAAhD,EAA0D;AACxD,YAAI5G,OAAO,EAAX,EAAe;AACb,eAAKzB,GAAL,IAAY,CAAZ;AACA,iBAAO,KAAKG,WAAL,CAAiB,iBAAGmI,YAApB,CAAP;AACD,SAHD,MAGO;AACL,YAAE,KAAKtI,GAAP;AACA,iBAAO,KAAKG,WAAL,CAAiB,iBAAG6E,SAApB,CAAP;AACD;AACF;AACDgD,aAAO,KAAK9H,KAAL,CAAWoB,KAAX,CAAiB2G,UAAjB,EAA6B,KAAKjI,GAAlC,CAAP;AACA,aAAO,KAAKG,WAAL,CAAiB,iBAAGkI,QAApB,EAA8BL,GAA9B,CAAP;AACD;AACD,QAAIvG,OAAO,EAAX,EAAe;AAAE;AACfuG,aAAO,KAAK9H,KAAL,CAAWoB,KAAX,CAAiB2G,UAAjB,EAA6B,KAAKjI,GAAlC,CAAP;AACAgI,aAAO,KAAKE,eAAL,CAAqB,IAArB,CAAP;AACAD,mBAAa,KAAKjI,GAAlB;AACD,KAJD,MAIO,IAAI,2BAAUyB,EAAV,CAAJ,EAAmB;AACxBuG,aAAO,KAAK9H,KAAL,CAAWoB,KAAX,CAAiB2G,UAAjB,EAA6B,KAAKjI,GAAlC,CAAP;AACA,QAAE,KAAKA,GAAP;AACA,cAAQyB,EAAR;AACA,aAAK,EAAL;AACE,cAAI,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,MAAoC,EAAxC,EAA4C,EAAE,KAAKA,GAAP;AAC9C,aAAK,EAAL;AACEgI,iBAAO,IAAP;AACA;AACF;AACEA,iBAAOpG,OAAOC,YAAP,CAAoBJ,EAApB,CAAP;AACA;AARF;AAUA,UAAI,KAAKzD,OAAL,CAAaC,SAAjB,EAA4B;AAC1B,UAAE,KAAKmD,OAAP;AACA,aAAKC,SAAL,GAAiB,KAAKrB,GAAtB;AACD;AACDiI,mBAAa,KAAKjI,GAAlB;AACD,KAlBM,MAkBA;AACL,QAAE,KAAKA,GAAP;AACD;AACF;AACF,CA5CD;;AA8CA;;AAEAzB,GAAG2J,eAAH,GAAqB,UAASK,UAAT,EAAqB;AACxC,MAAI9G,KAAK,KAAKvB,KAAL,CAAWS,UAAX,CAAsB,EAAE,KAAKX,GAA7B,CAAT;AACA,IAAE,KAAKA,GAAP;AACA,UAAQyB,EAAR;AACA,SAAK,GAAL;AAAU,aAAO,IAAP,CADV,CACsB;AACtB,SAAK,GAAL;AAAU,aAAO,IAAP,CAFV,CAEsB;AACtB,SAAK,GAAL;AAAU,aAAOG,OAAOC,YAAP,CAAoB,KAAKiG,WAAL,CAAiB,CAAjB,CAApB,CAAyC;AAAzC,OAAP,CACV,KAAK,GAAL;AAAU,aAAO3C,kBAAkB,KAAKyC,aAAL,EAAlB,CAAwC;AAAxC,OAAP,CACV,KAAK,GAAL;AAAU,aAAO,IAAP,CALV,CAKsB;AACtB,SAAK,EAAL;AAAS,aAAO,IAAP,CANT,CAMqB;AACrB,SAAK,GAAL;AAAU,aAAO,MAAP,CAPV,CAO0B;AAC1B,SAAK,GAAL;AAAU,aAAO,IAAP,CARV,CAQsB;AACtB,SAAK,EAAL;AAAS,UAAI,KAAK1H,KAAL,CAAWS,UAAX,CAAsB,KAAKX,GAA3B,MAAoC,EAAxC,EAA4C,EAAE,KAAKA,GAAP,CATrD,CASgE;AAChE,SAAK,EAAL;AAAS;AACP,UAAI,KAAKhC,OAAL,CAAaC,SAAjB,EAA4B;AAAE,aAAKoD,SAAL,GAAiB,KAAKrB,GAAtB,CAA2B,EAAE,KAAKoB,OAAP;AAAgB;AACzE,aAAO,EAAP;AACF;AACE,UAAIK,MAAM,EAAN,IAAYA,MAAM,EAAtB,EAA0B;AACxB,YAAI+G,WAAW,KAAKtI,KAAL,CAAWuI,MAAX,CAAkB,KAAKzI,GAAL,GAAW,CAA7B,EAAgC,CAAhC,EAAmCiB,KAAnC,CAAyC,SAAzC,EAAoD,CAApD,CAAf;AACA,YAAIuG,QAAQE,SAASc,QAAT,EAAmB,CAAnB,CAAZ;AACA,YAAIhB,QAAQ,GAAZ,EAAiB;AACfgB,qBAAWA,SAASlH,KAAT,CAAe,CAAf,EAAkB,CAAC,CAAnB,CAAX;AACAkG,kBAAQE,SAASc,QAAT,EAAmB,CAAnB,CAAR;AACD;AACD,YAAIA,aAAa,GAAb,KAAqB,KAAKb,MAAL,IAAeY,UAApC,CAAJ,EAAqD;AACnD,eAAKxH,KAAL,CAAW,KAAKf,GAAL,GAAW,CAAtB,EAAyB,8BAAzB;AACD;AACD,aAAKA,GAAL,IAAYwI,SAAS3I,MAAT,GAAkB,CAA9B;AACA,eAAO+B,OAAOC,YAAP,CAAoB2F,KAApB,CAAP;AACD;AACD,aAAO5F,OAAOC,YAAP,CAAoBJ,EAApB,CAAP;AA3BF;AA6BD,CAhCD;;AAkCA;;AAEAlD,GAAGuJ,WAAH,GAAiB,UAASb,GAAT,EAAc;AAC7B,MAAIY,UAAU,KAAK7H,GAAnB;AACA,MAAI0I,IAAI,KAAK3B,OAAL,CAAa,EAAb,EAAiBE,GAAjB,CAAR;AACA,MAAIyB,MAAM,IAAV,EAAgB,KAAK3H,KAAL,CAAW8G,OAAX,EAAoB,+BAApB;AAChB,SAAOa,CAAP;AACD,CALD;;AAOA;AACA;AACA;AACA;AACA;;AAEAnK,GAAG8H,SAAH,GAAe,YAAW;AACxB,OAAKsC,WAAL,GAAmB,KAAnB;AACA,MAAIC,OAAO,EAAX;AAAA,MAAeC,QAAQ,IAAvB;AAAA,MAA6BZ,aAAa,KAAKjI,GAA/C;AACA,MAAI8I,SAAS,KAAK9K,OAAL,CAAawC,WAAb,IAA4B,CAAzC;AACA,SAAO,KAAKR,GAAL,GAAW,KAAKE,KAAL,CAAWL,MAA7B,EAAqC;AACnC,QAAI4B,KAAK,KAAKnB,iBAAL,EAAT;AACA,QAAI,kCAAiBmB,EAAjB,EAAqBqH,MAArB,CAAJ,EAAkC;AAChC,WAAK9I,GAAL,IAAYyB,MAAM,MAAN,GAAe,CAAf,GAAmB,CAA/B;AACD,KAFD,MAEO,IAAIA,OAAO,EAAX,EAAe;AAAE;AACtB,WAAKkH,WAAL,GAAmB,IAAnB;AACAC,cAAQ,KAAK1I,KAAL,CAAWoB,KAAX,CAAiB2G,UAAjB,EAA6B,KAAKjI,GAAlC,CAAR;AACA,UAAI+I,WAAW,KAAK/I,GAApB;AACA,UAAI,KAAKE,KAAL,CAAWS,UAAX,CAAsB,EAAE,KAAKX,GAA7B,KAAqC,GAAzC,EAA8C;AAC5C,aAAKe,KAAL,CAAW,KAAKf,GAAhB,EAAqB,2CAArB;AACF,QAAE,KAAKA,GAAP;AACA,UAAIgJ,MAAM,KAAKpB,aAAL,EAAV;AACA,UAAI,CAAC,CAACiB,oEAAD,EAA+CG,GAA/C,EAAoDF,MAApD,CAAL,EACE,KAAK/H,KAAL,CAAWgI,QAAX,EAAqB,wBAArB;AACFH,cAAQzD,kBAAkB6D,GAAlB,CAAR;AACAf,mBAAa,KAAKjI,GAAlB;AACD,KAZM,MAYA;AACL;AACD;AACD6I,YAAQ,KAAR;AACD;AACD,SAAOD,OAAO,KAAK1I,KAAL,CAAWoB,KAAX,CAAiB2G,UAAjB,EAA6B,KAAKjI,GAAlC,CAAd;AACD,CA1BD;;AA4BA;AACA;;AAEAzB,GAAGkC,QAAH,GAAc,YAAW;AACvB,MAAImI,OAAO,KAAKvC,SAAL,EAAX;AACA,MAAIzI,OAAO,iBAAGqL,IAAd;AACA,MAAI,KAAKC,QAAL,CAAcvH,IAAd,CAAmBiH,IAAnB,CAAJ,EAA8B;AAC5B,QAAI,KAAKD,WAAT,EAAsB,KAAKQ,gBAAL,CAAsB,KAAKrL,KAA3B,EAAkC,gCAAgC8K,IAAlE;AACtBhL,WAAO,oBAAagL,IAAb,CAAP;AACD;AACD,SAAO,KAAKzI,WAAL,CAAiBvC,IAAjB,EAAuBgL,IAAvB,CAAP;AACD,CARD","file":"tokenize.js","sourcesContent":["import {isIdentifierStart, isIdentifierChar} from \"./identifier\"\nimport {types as tt, keywords as keywordTypes} from \"./tokentype\"\nimport {Parser} from \"./state\"\nimport {SourceLocation} from \"./locutil\"\nimport {lineBreak, lineBreakG, isNewLine, nonASCIIwhitespace} from \"./whitespace\"\n\n// Object type used to represent tokens. Note that normally, tokens\n// simply exist as properties on the parser object. This is only\n// used for the onToken callback and the external tokenizer.\n\nexport class Token {\n  constructor(p) {\n    this.type = p.type\n    this.value = p.value\n    this.start = p.start\n    this.end = p.end\n    if (p.options.locations)\n      this.loc = new SourceLocation(p, p.startLoc, p.endLoc)\n    if (p.options.ranges)\n      this.range = [p.start, p.end]\n  }\n}\n\n// ## Tokenizer\n\nconst pp = Parser.prototype\n\n// Are we running under Rhino?\nconst isRhino = typeof Packages == \"object\" && Object.prototype.toString.call(Packages) == \"[object JavaPackage]\"\n\n// Move to the next token\n\npp.next = function() {\n  if (this.options.onToken)\n    this.options.onToken(new Token(this))\n\n  this.lastTokEnd = this.end\n  this.lastTokStart = this.start\n  this.lastTokEndLoc = this.endLoc\n  this.lastTokStartLoc = this.startLoc\n  this.nextToken()\n}\n\npp.getToken = function() {\n  this.next()\n  return new Token(this)\n}\n\n// If we're in an ES6 environment, make parsers iterable\nif (typeof Symbol !== \"undefined\")\n  pp[Symbol.iterator] = function() {\n    return {\n      next: () => {\n        let token = this.getToken()\n        return {\n          done: token.type === tt.eof,\n          value: token\n        }\n      }\n    }\n  }\n\n// Toggle strict mode. Re-reads the next number or string to please\n// pedantic tests (`\"use strict\"; 010;` should fail).\n\npp.curContext = function() {\n  return this.context[this.context.length - 1]\n}\n\n// Read a single token, updating the parser object's token-related\n// properties.\n\npp.nextToken = function() {\n  let curContext = this.curContext()\n  if (!curContext || !curContext.preserveSpace) this.skipSpace()\n\n  this.start = this.pos\n  if (this.options.locations) this.startLoc = this.curPosition()\n  if (this.pos >= this.input.length) return this.finishToken(tt.eof)\n\n  if (curContext.override) return curContext.override(this)\n  else this.readToken(this.fullCharCodeAtPos())\n}\n\npp.readToken = function(code) {\n  // Identifier or keyword. '\\uXXXX' sequences are allowed in\n  // identifiers, so '\\' also dispatches to that.\n  if (isIdentifierStart(code, this.options.ecmaVersion >= 6) || code === 92 /* '\\' */)\n    return this.readWord()\n\n  return this.getTokenFromCode(code)\n}\n\npp.fullCharCodeAtPos = function() {\n  let code = this.input.charCodeAt(this.pos)\n  if (code <= 0xd7ff || code >= 0xe000) return code\n  let next = this.input.charCodeAt(this.pos + 1)\n  return (code << 10) + next - 0x35fdc00\n}\n\npp.skipBlockComment = function() {\n  let startLoc = this.options.onComment && this.curPosition()\n  let start = this.pos, end = this.input.indexOf(\"*/\", this.pos += 2)\n  if (end === -1) this.raise(this.pos - 2, \"Unterminated comment\")\n  this.pos = end + 2\n  if (this.options.locations) {\n    lineBreakG.lastIndex = start\n    let match\n    while ((match = lineBreakG.exec(this.input)) && match.index < this.pos) {\n      ++this.curLine\n      this.lineStart = match.index + match[0].length\n    }\n  }\n  if (this.options.onComment)\n    this.options.onComment(true, this.input.slice(start + 2, end), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\npp.skipLineComment = function(startSkip) {\n  let start = this.pos\n  let startLoc = this.options.onComment && this.curPosition()\n  let ch = this.input.charCodeAt(this.pos += startSkip)\n  while (this.pos < this.input.length && ch !== 10 && ch !== 13 && ch !== 8232 && ch !== 8233) {\n    ++this.pos\n    ch = this.input.charCodeAt(this.pos)\n  }\n  if (this.options.onComment)\n    this.options.onComment(false, this.input.slice(start + startSkip, this.pos), start, this.pos,\n                           startLoc, this.curPosition())\n}\n\n// Called at the start of the parse and after every token. Skips\n// whitespace and comments, and.\n\npp.skipSpace = function() {\n  loop: while (this.pos < this.input.length) {\n    let ch = this.input.charCodeAt(this.pos)\n    switch (ch) {\n    case 32: case 160: // ' '\n      ++this.pos\n      break\n    case 13:\n      if (this.input.charCodeAt(this.pos + 1) === 10) {\n        ++this.pos\n      }\n    case 10: case 8232: case 8233:\n      ++this.pos\n      if (this.options.locations) {\n        ++this.curLine\n        this.lineStart = this.pos\n      }\n      break\n    case 47: // '/'\n      switch (this.input.charCodeAt(this.pos + 1)) {\n      case 42: // '*'\n        this.skipBlockComment()\n        break\n      case 47:\n        this.skipLineComment(2)\n        break\n      default:\n        break loop\n      }\n      break\n    default:\n      if (ch > 8 && ch < 14 || ch >= 5760 && nonASCIIwhitespace.test(String.fromCharCode(ch))) {\n        ++this.pos\n      } else {\n        break loop\n      }\n    }\n  }\n}\n\n// Called at the end of every token. Sets `end`, `val`, and\n// maintains `context` and `exprAllowed`, and skips the space after\n// the token, so that the next one's `start` will point at the\n// right position.\n\npp.finishToken = function(type, val) {\n  this.end = this.pos\n  if (this.options.locations) this.endLoc = this.curPosition()\n  let prevType = this.type\n  this.type = type\n  this.value = val\n\n  this.updateContext(prevType)\n}\n\n// ### Token reading\n\n// This is the function that is called to fetch the next token. It\n// is somewhat obscure, because it works in character codes rather\n// than characters, and because operator parsing has been inlined\n// into it.\n//\n// All in the name of speed.\n//\npp.readToken_dot = function() {\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next >= 48 && next <= 57) return this.readNumber(true)\n  let next2 = this.input.charCodeAt(this.pos + 2)\n  if (this.options.ecmaVersion >= 6 && next === 46 && next2 === 46) { // 46 = dot '.'\n    this.pos += 3\n    return this.finishToken(tt.ellipsis)\n  } else {\n    ++this.pos\n    return this.finishToken(tt.dot)\n  }\n}\n\npp.readToken_slash = function() { // '/'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (this.exprAllowed) { ++this.pos; return this.readRegexp() }\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.slash, 1)\n}\n\npp.readToken_mult_modulo_exp = function(code) { // '%*'\n  let next = this.input.charCodeAt(this.pos + 1)\n  let size = 1\n  let tokentype = code === 42 ? tt.star : tt.modulo\n\n  // exponentiation operator ** and **=\n  if (this.options.ecmaVersion >= 7 && next === 42) {\n    ++size\n    tokentype = tt.starstar\n    next = this.input.charCodeAt(this.pos + 2)\n  }\n\n  if (next === 61) return this.finishOp(tt.assign, size + 1)\n  return this.finishOp(tokentype, size)\n}\n\npp.readToken_pipe_amp = function(code) { // '|&'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) return this.finishOp(code === 124 ? tt.logicalOR : tt.logicalAND, 2)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(code === 124 ? tt.bitwiseOR : tt.bitwiseAND, 1)\n}\n\npp.readToken_caret = function() { // '^'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.bitwiseXOR, 1)\n}\n\npp.readToken_plus_min = function(code) { // '+-'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === code) {\n    if (next == 45 && this.input.charCodeAt(this.pos + 2) == 62 &&\n        lineBreak.test(this.input.slice(this.lastTokEnd, this.pos))) {\n      // A `-->` line comment\n      this.skipLineComment(3)\n      this.skipSpace()\n      return this.nextToken()\n    }\n    return this.finishOp(tt.incDec, 2)\n  }\n  if (next === 61) return this.finishOp(tt.assign, 2)\n  return this.finishOp(tt.plusMin, 1)\n}\n\npp.readToken_lt_gt = function(code) { // '<>'\n  let next = this.input.charCodeAt(this.pos + 1)\n  let size = 1\n  if (next === code) {\n    size = code === 62 && this.input.charCodeAt(this.pos + 2) === 62 ? 3 : 2\n    if (this.input.charCodeAt(this.pos + size) === 61) return this.finishOp(tt.assign, size + 1)\n    return this.finishOp(tt.bitShift, size)\n  }\n  if (next == 33 && code == 60 && this.input.charCodeAt(this.pos + 2) == 45 &&\n      this.input.charCodeAt(this.pos + 3) == 45) {\n    if (this.inModule) this.unexpected()\n    // `<!--`, an XML-style comment that should be interpreted as a line comment\n    this.skipLineComment(4)\n    this.skipSpace()\n    return this.nextToken()\n  }\n  if (next === 61) size = 2\n  return this.finishOp(tt.relational, size)\n}\n\npp.readToken_eq_excl = function(code) { // '=!'\n  let next = this.input.charCodeAt(this.pos + 1)\n  if (next === 61) return this.finishOp(tt.equality, this.input.charCodeAt(this.pos + 2) === 61 ? 3 : 2)\n  if (code === 61 && next === 62 && this.options.ecmaVersion >= 6) { // '=>'\n    this.pos += 2\n    return this.finishToken(tt.arrow)\n  }\n  return this.finishOp(code === 61 ? tt.eq : tt.prefix, 1)\n}\n\npp.getTokenFromCode = function(code) {\n  switch (code) {\n    // The interpretation of a dot depends on whether it is followed\n    // by a digit or another two dots.\n  case 46: // '.'\n    return this.readToken_dot()\n\n    // Punctuation tokens.\n  case 40: ++this.pos; return this.finishToken(tt.parenL)\n  case 41: ++this.pos; return this.finishToken(tt.parenR)\n  case 59: ++this.pos; return this.finishToken(tt.semi)\n  case 44: ++this.pos; return this.finishToken(tt.comma)\n  case 91: ++this.pos; return this.finishToken(tt.bracketL)\n  case 93: ++this.pos; return this.finishToken(tt.bracketR)\n  case 123: ++this.pos; return this.finishToken(tt.braceL)\n  case 125: ++this.pos; return this.finishToken(tt.braceR)\n  case 58: ++this.pos; return this.finishToken(tt.colon)\n  case 63: ++this.pos; return this.finishToken(tt.question)\n\n  case 96: // '`'\n    if (this.options.ecmaVersion < 6) break\n    ++this.pos\n    return this.finishToken(tt.backQuote)\n\n  case 48: // '0'\n    let next = this.input.charCodeAt(this.pos + 1)\n    if (next === 120 || next === 88) return this.readRadixNumber(16) // '0x', '0X' - hex number\n    if (this.options.ecmaVersion >= 6) {\n      if (next === 111 || next === 79) return this.readRadixNumber(8) // '0o', '0O' - octal number\n      if (next === 98 || next === 66) return this.readRadixNumber(2) // '0b', '0B' - binary number\n    }\n    // Anything else beginning with a digit is an integer, octal\n    // number, or float.\n  case 49: case 50: case 51: case 52: case 53: case 54: case 55: case 56: case 57: // 1-9\n    return this.readNumber(false)\n\n    // Quotes produce strings.\n  case 34: case 39: // '\"', \"'\"\n    return this.readString(code)\n\n    // Operators are parsed inline in tiny state machines. '=' (61) is\n    // often referred to. `finishOp` simply skips the amount of\n    // characters it is given as second argument, and returns a token\n    // of the type given by its first argument.\n\n  case 47: // '/'\n    return this.readToken_slash()\n\n  case 37: case 42: // '%*'\n    return this.readToken_mult_modulo_exp(code)\n\n  case 124: case 38: // '|&'\n    return this.readToken_pipe_amp(code)\n\n  case 94: // '^'\n    return this.readToken_caret()\n\n  case 43: case 45: // '+-'\n    return this.readToken_plus_min(code)\n\n  case 60: case 62: // '<>'\n    return this.readToken_lt_gt(code)\n\n  case 61: case 33: // '=!'\n    return this.readToken_eq_excl(code)\n\n  case 126: // '~'\n    return this.finishOp(tt.prefix, 1)\n  }\n\n  this.raise(this.pos, \"Unexpected character '\" + codePointToString(code) + \"'\")\n}\n\npp.finishOp = function(type, size) {\n  let str = this.input.slice(this.pos, this.pos + size)\n  this.pos += size\n  return this.finishToken(type, str)\n}\n\n// Parse a regular expression. Some context-awareness is necessary,\n// since a '/' inside a '[]' set does not end the expression.\n\nfunction tryCreateRegexp(src, flags, throwErrorAt, parser) {\n  try {\n    return new RegExp(src, flags)\n  } catch (e) {\n    if (throwErrorAt !== undefined) {\n      if (e instanceof SyntaxError) parser.raise(throwErrorAt, \"Error parsing regular expression: \" + e.message)\n      throw e\n    }\n  }\n}\n\nconst regexpUnicodeSupport = !!tryCreateRegexp(\"\\uffff\", \"u\")\n\npp.readRegexp = function() {\n  let escaped, inClass, start = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(start, \"Unterminated regular expression\")\n    let ch = this.input.charAt(this.pos)\n    if (lineBreak.test(ch)) this.raise(start, \"Unterminated regular expression\")\n    if (!escaped) {\n      if (ch === \"[\") inClass = true\n      else if (ch === \"]\" && inClass) inClass = false\n      else if (ch === \"/\" && !inClass) break\n      escaped = ch === \"\\\\\"\n    } else escaped = false\n    ++this.pos\n  }\n  let content = this.input.slice(start, this.pos)\n  ++this.pos\n  // Need to use `readWord1` because '\\uXXXX' sequences are allowed\n  // here (don't ask).\n  let mods = this.readWord1()\n  let tmp = content, tmpFlags = \"\"\n  if (mods) {\n    let validFlags = /^[gim]*$/\n    if (this.options.ecmaVersion >= 6) validFlags = /^[gimuy]*$/\n    if (!validFlags.test(mods)) this.raise(start, \"Invalid regular expression flag\")\n    if (mods.indexOf(\"u\") >= 0) {\n      if (regexpUnicodeSupport) {\n        tmpFlags = \"u\"\n      } else {\n        // Replace each astral symbol and every Unicode escape sequence that\n        // possibly represents an astral symbol or a paired surrogate with a\n        // single ASCII symbol to avoid throwing on regular expressions that\n        // are only valid in combination with the `/u` flag.\n        // Note: replacing with the ASCII symbol `x` might cause false\n        // negatives in unlikely scenarios. For example, `[\\u{61}-b]` is a\n        // perfectly valid pattern that is equivalent to `[a-b]`, but it would\n        // be replaced by `[x-b]` which throws an error.\n        tmp = tmp.replace(/\\\\u\\{([0-9a-fA-F]+)\\}/g, (_match, code, offset) => {\n          code = Number(\"0x\" + code)\n          if (code > 0x10FFFF) this.raise(start + offset + 3, \"Code point out of bounds\")\n          return \"x\"\n        })\n        tmp = tmp.replace(/\\\\u([a-fA-F0-9]{4})|[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g, \"x\")\n        tmpFlags = tmpFlags.replace(\"u\", \"\")\n      }\n    }\n  }\n  // Detect invalid regular expressions.\n  let value = null\n  // Rhino's regular expression parser is flaky and throws uncatchable exceptions,\n  // so don't do detection if we are running under Rhino\n  if (!isRhino) {\n    tryCreateRegexp(tmp, tmpFlags, start, this)\n    // Get a regular expression object for this pattern-flag pair, or `null` in\n    // case the current environment doesn't support the flags it uses.\n    value = tryCreateRegexp(content, mods)\n  }\n  return this.finishToken(tt.regexp, {pattern: content, flags: mods, value: value})\n}\n\n// Read an integer in the given radix. Return null if zero digits\n// were read, the integer value otherwise. When `len` is given, this\n// will return `null` unless the integer has exactly `len` digits.\n\npp.readInt = function(radix, len) {\n  let start = this.pos, total = 0\n  for (let i = 0, e = len == null ? Infinity : len; i < e; ++i) {\n    let code = this.input.charCodeAt(this.pos), val\n    if (code >= 97) val = code - 97 + 10 // a\n    else if (code >= 65) val = code - 65 + 10 // A\n    else if (code >= 48 && code <= 57) val = code - 48 // 0-9\n    else val = Infinity\n    if (val >= radix) break\n    ++this.pos\n    total = total * radix + val\n  }\n  if (this.pos === start || len != null && this.pos - start !== len) return null\n\n  return total\n}\n\npp.readRadixNumber = function(radix) {\n  this.pos += 2 // 0x\n  let val = this.readInt(radix)\n  if (val == null) this.raise(this.start + 2, \"Expected number in radix \" + radix)\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n  return this.finishToken(tt.num, val)\n}\n\n// Read an integer, octal integer, or floating-point number.\n\npp.readNumber = function(startsWithDot) {\n  let start = this.pos, isFloat = false, octal = this.input.charCodeAt(this.pos) === 48\n  if (!startsWithDot && this.readInt(10) === null) this.raise(start, \"Invalid number\")\n  if (octal && this.pos == start + 1) octal = false\n  let next = this.input.charCodeAt(this.pos)\n  if (next === 46 && !octal) { // '.'\n    ++this.pos\n    this.readInt(10)\n    isFloat = true\n    next = this.input.charCodeAt(this.pos)\n  }\n  if ((next === 69 || next === 101) && !octal) { // 'eE'\n    next = this.input.charCodeAt(++this.pos)\n    if (next === 43 || next === 45) ++this.pos // '+-'\n    if (this.readInt(10) === null) this.raise(start, \"Invalid number\")\n    isFloat = true\n  }\n  if (isIdentifierStart(this.fullCharCodeAtPos())) this.raise(this.pos, \"Identifier directly after number\")\n\n  let str = this.input.slice(start, this.pos), val\n  if (isFloat) val = parseFloat(str)\n  else if (!octal || str.length === 1) val = parseInt(str, 10)\n  else if (/[89]/.test(str) || this.strict) this.raise(start, \"Invalid number\")\n  else val = parseInt(str, 8)\n  return this.finishToken(tt.num, val)\n}\n\n// Read a string value, interpreting backslash-escapes.\n\npp.readCodePoint = function() {\n  let ch = this.input.charCodeAt(this.pos), code\n\n  if (ch === 123) {\n    if (this.options.ecmaVersion < 6) this.unexpected()\n    let codePos = ++this.pos\n    code = this.readHexChar(this.input.indexOf(\"}\", this.pos) - this.pos)\n    ++this.pos\n    if (code > 0x10FFFF) this.raise(codePos, \"Code point out of bounds\")\n  } else {\n    code = this.readHexChar(4)\n  }\n  return code\n}\n\nfunction codePointToString(code) {\n  // UTF-16 Decoding\n  if (code <= 0xFFFF) return String.fromCharCode(code)\n  code -= 0x10000\n  return String.fromCharCode((code >> 10) + 0xD800, (code & 1023) + 0xDC00)\n}\n\npp.readString = function(quote) {\n  let out = \"\", chunkStart = ++this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated string constant\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === quote) break\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar(false)\n      chunkStart = this.pos\n    } else {\n      if (isNewLine(ch)) this.raise(this.start, \"Unterminated string constant\")\n      ++this.pos\n    }\n  }\n  out += this.input.slice(chunkStart, this.pos++)\n  return this.finishToken(tt.string, out)\n}\n\n// Reads template string tokens.\n\npp.readTmplToken = function() {\n  let out = \"\", chunkStart = this.pos\n  for (;;) {\n    if (this.pos >= this.input.length) this.raise(this.start, \"Unterminated template\")\n    let ch = this.input.charCodeAt(this.pos)\n    if (ch === 96 || ch === 36 && this.input.charCodeAt(this.pos + 1) === 123) { // '`', '${'\n      if (this.pos === this.start && this.type === tt.template) {\n        if (ch === 36) {\n          this.pos += 2\n          return this.finishToken(tt.dollarBraceL)\n        } else {\n          ++this.pos\n          return this.finishToken(tt.backQuote)\n        }\n      }\n      out += this.input.slice(chunkStart, this.pos)\n      return this.finishToken(tt.template, out)\n    }\n    if (ch === 92) { // '\\'\n      out += this.input.slice(chunkStart, this.pos)\n      out += this.readEscapedChar(true)\n      chunkStart = this.pos\n    } else if (isNewLine(ch)) {\n      out += this.input.slice(chunkStart, this.pos)\n      ++this.pos\n      switch (ch) {\n      case 13:\n        if (this.input.charCodeAt(this.pos) === 10) ++this.pos\n      case 10:\n        out += \"\\n\"\n        break\n      default:\n        out += String.fromCharCode(ch)\n        break\n      }\n      if (this.options.locations) {\n        ++this.curLine\n        this.lineStart = this.pos\n      }\n      chunkStart = this.pos\n    } else {\n      ++this.pos\n    }\n  }\n}\n\n// Used to read escaped characters\n\npp.readEscapedChar = function(inTemplate) {\n  let ch = this.input.charCodeAt(++this.pos)\n  ++this.pos\n  switch (ch) {\n  case 110: return \"\\n\" // 'n' -> '\\n'\n  case 114: return \"\\r\" // 'r' -> '\\r'\n  case 120: return String.fromCharCode(this.readHexChar(2)) // 'x'\n  case 117: return codePointToString(this.readCodePoint()) // 'u'\n  case 116: return \"\\t\" // 't' -> '\\t'\n  case 98: return \"\\b\" // 'b' -> '\\b'\n  case 118: return \"\\u000b\" // 'v' -> '\\u000b'\n  case 102: return \"\\f\" // 'f' -> '\\f'\n  case 13: if (this.input.charCodeAt(this.pos) === 10) ++this.pos // '\\r\\n'\n  case 10: // ' \\n'\n    if (this.options.locations) { this.lineStart = this.pos; ++this.curLine }\n    return \"\"\n  default:\n    if (ch >= 48 && ch <= 55) {\n      let octalStr = this.input.substr(this.pos - 1, 3).match(/^[0-7]+/)[0]\n      let octal = parseInt(octalStr, 8)\n      if (octal > 255) {\n        octalStr = octalStr.slice(0, -1)\n        octal = parseInt(octalStr, 8)\n      }\n      if (octalStr !== \"0\" && (this.strict || inTemplate)) {\n        this.raise(this.pos - 2, \"Octal literal in strict mode\")\n      }\n      this.pos += octalStr.length - 1\n      return String.fromCharCode(octal)\n    }\n    return String.fromCharCode(ch)\n  }\n}\n\n// Used to read character escape sequences ('\\x', '\\u', '\\U').\n\npp.readHexChar = function(len) {\n  let codePos = this.pos\n  let n = this.readInt(16, len)\n  if (n === null) this.raise(codePos, \"Bad character escape sequence\")\n  return n\n}\n\n// Read an identifier, and return it as a string. Sets `this.containsEsc`\n// to whether the word contained a '\\u' escape.\n//\n// Incrementally adds only escaped chars, adding other chunks as-is\n// as a micro-optimization.\n\npp.readWord1 = function() {\n  this.containsEsc = false\n  let word = \"\", first = true, chunkStart = this.pos\n  let astral = this.options.ecmaVersion >= 6\n  while (this.pos < this.input.length) {\n    let ch = this.fullCharCodeAtPos()\n    if (isIdentifierChar(ch, astral)) {\n      this.pos += ch <= 0xffff ? 1 : 2\n    } else if (ch === 92) { // \"\\\"\n      this.containsEsc = true\n      word += this.input.slice(chunkStart, this.pos)\n      let escStart = this.pos\n      if (this.input.charCodeAt(++this.pos) != 117) // \"u\"\n        this.raise(this.pos, \"Expecting Unicode escape sequence \\\\uXXXX\")\n      ++this.pos\n      let esc = this.readCodePoint()\n      if (!(first ? isIdentifierStart : isIdentifierChar)(esc, astral))\n        this.raise(escStart, \"Invalid Unicode escape\")\n      word += codePointToString(esc)\n      chunkStart = this.pos\n    } else {\n      break\n    }\n    first = false\n  }\n  return word + this.input.slice(chunkStart, this.pos)\n}\n\n// Read an identifier or keyword token. Will check for reserved\n// words when necessary.\n\npp.readWord = function() {\n  let word = this.readWord1()\n  let type = tt.name\n  if (this.keywords.test(word)) {\n    if (this.containsEsc) this.raiseRecoverable(this.start, \"Escape sequence in keyword \" + word)\n    type = keywordTypes[word]\n  }\n  return this.finishToken(type, word)\n}\n"]}