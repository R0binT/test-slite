{"version":3,"sources":["../../../node_modules/anymatch/index.js"],"names":["arrify","require","micromatch","path","anymatch","criteria","value","returnIndex","startIndex","endIndex","arguments","length","bind","map","criterion","matcher","string","altString","matched","matchIndex","testCriteria","index","result","toString","call","isMatch","test","apply","crit","negGlobs","reduce","arr","slice","push","substr","any","sep","split","join","some","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,SAASC,QAAQ,QAAR,CAAb;AACA,IAAIC,aAAaD,QAAQ,YAAR,CAAjB;AACA,IAAIE,OAAOF,QAAQ,MAAR,CAAX;;AAEA,IAAIG,WAAW,SAAXA,QAAW,CAASC,QAAT,EAAmBC,KAAnB,EAA0BC,WAA1B,EAAuCC,UAAvC,EAAmDC,QAAnD,EAA6D;AAC1EJ,aAAWL,OAAOK,QAAP,CAAX;AACAC,UAAQN,OAAOM,KAAP,CAAR;AACA,MAAII,UAAUC,MAAV,KAAqB,CAAzB,EAA4B;AAC1B,WAAOP,SAASQ,IAAT,CAAc,IAAd,EAAoBP,SAASQ,GAAT,CAAa,UAASC,SAAT,EAAoB;AAC1D,aAAO,OAAOA,SAAP,KAAqB,QAArB,IAAiCA,UAAU,CAAV,MAAiB,GAAlD,GACLZ,WAAWa,OAAX,CAAmBD,SAAnB,CADK,GAC2BA,SADlC;AAED,KAH0B,CAApB,CAAP;AAID;AACDN,eAAaA,cAAc,CAA3B;AACA,MAAIQ,SAASV,MAAM,CAAN,CAAb;AACA,MAAIW,SAAJ;AACA,MAAIC,UAAU,KAAd;AACA,MAAIC,aAAa,CAAC,CAAlB;AACA,WAASC,YAAT,CAAuBN,SAAvB,EAAkCO,KAAlC,EAAyC;AACvC,QAAIC,MAAJ;AACA,YAAQC,SAASC,IAAT,CAAcV,SAAd,CAAR;AACA,WAAK,iBAAL;AACEQ,iBAASN,WAAWF,SAAX,IAAwBG,aAAaA,cAAcH,SAA5D;AACAQ,iBAASA,UAAUpB,WAAWuB,OAAX,CAAmBT,MAAnB,EAA2BF,SAA3B,CAAnB;AACA;AACF,WAAK,iBAAL;AACEQ,iBAASR,UAAUY,IAAV,CAAeV,MAAf,KAA0BC,aAAaH,UAAUY,IAAV,CAAeT,SAAf,CAAhD;AACA;AACF,WAAK,mBAAL;AACEK,iBAASR,UAAUa,KAAV,CAAgB,IAAhB,EAAsBrB,KAAtB,CAAT;AACA;AACF;AACEgB,iBAAS,KAAT;AAZF;AAcA,QAAIA,MAAJ,EAAY;AACVH,mBAAaE,QAAQb,UAArB;AACD;AACD,WAAOc,MAAP;AACD;AACD,MAAIM,OAAOvB,QAAX;AACA,MAAIwB,WAAWD,KAAKE,MAAL,CAAY,UAASC,GAAT,EAAcjB,SAAd,EAAyBO,KAAzB,EAAgC;AACzD,QAAI,OAAOP,SAAP,KAAqB,QAArB,IAAiCA,UAAU,CAAV,MAAiB,GAAtD,EAA2D;AACzD,UAAIc,SAASvB,QAAb,EAAuB;AACrB;AACAuB,eAAOA,KAAKI,KAAL,EAAP;AACD;AACDJ,WAAKP,KAAL,IAAc,IAAd;AACAU,UAAIE,IAAJ,CAASnB,UAAUoB,MAAV,CAAiB,CAAjB,CAAT;AACD;AACD,WAAOH,GAAP;AACD,GAVc,EAUZ,EAVY,CAAf;AAWA,MAAI,CAACF,SAASlB,MAAV,IAAoB,CAACT,WAAWiC,GAAX,CAAenB,MAAf,EAAuBa,QAAvB,CAAzB,EAA2D;AACzD,QAAI1B,KAAKiC,GAAL,KAAa,IAAb,IAAqB,OAAOpB,MAAP,KAAkB,QAA3C,EAAqD;AACnDC,kBAAYD,OAAOqB,KAAP,CAAa,IAAb,EAAmBC,IAAnB,CAAwB,GAAxB,CAAZ;AACArB,kBAAYA,cAAcD,MAAd,GAAuB,IAAvB,GAA8BC,SAA1C;AACD;AACDC,cAAUU,KAAKI,KAAL,CAAWxB,UAAX,EAAuBC,QAAvB,EAAiC8B,IAAjC,CAAsCnB,YAAtC,CAAV;AACD;AACD,SAAOb,gBAAgB,IAAhB,GAAuBY,UAAvB,GAAoCD,OAA3C;AACD,CAvDD;;AAyDAsB,OAAOC,OAAP,GAAiBrC,QAAjB","file":"index.js","sourcesContent":["'use strict';\n\nvar arrify = require('arrify');\nvar micromatch = require('micromatch');\nvar path = require('path');\n\nvar anymatch = function(criteria, value, returnIndex, startIndex, endIndex) {\n  criteria = arrify(criteria);\n  value = arrify(value);\n  if (arguments.length === 1) {\n    return anymatch.bind(null, criteria.map(function(criterion) {\n      return typeof criterion === 'string' && criterion[0] !== '!' ?\n        micromatch.matcher(criterion) : criterion;\n    }));\n  }\n  startIndex = startIndex || 0;\n  var string = value[0];\n  var altString;\n  var matched = false;\n  var matchIndex = -1;\n  function testCriteria (criterion, index) {\n    var result;\n    switch (toString.call(criterion)) {\n    case '[object String]':\n      result = string === criterion || altString && altString === criterion;\n      result = result || micromatch.isMatch(string, criterion);\n      break;\n    case '[object RegExp]':\n      result = criterion.test(string) || altString && criterion.test(altString);\n      break;\n    case '[object Function]':\n      result = criterion.apply(null, value);\n      break;\n    default:\n      result = false;\n    }\n    if (result) {\n      matchIndex = index + startIndex;\n    }\n    return result;\n  }\n  var crit = criteria;\n  var negGlobs = crit.reduce(function(arr, criterion, index) {\n    if (typeof criterion === 'string' && criterion[0] === '!') {\n      if (crit === criteria) {\n        // make a copy before modifying\n        crit = crit.slice();\n      }\n      crit[index] = null;\n      arr.push(criterion.substr(1));\n    }\n    return arr;\n  }, []);\n  if (!negGlobs.length || !micromatch.any(string, negGlobs)) {\n    if (path.sep === '\\\\' && typeof string === 'string') {\n      altString = string.split('\\\\').join('/');\n      altString = altString === string ? null : altString;\n    }\n    matched = crit.slice(startIndex, endIndex).some(testCriteria);\n  }\n  return returnIndex === true ? matchIndex : matched;\n};\n\nmodule.exports = anymatch;\n"]}